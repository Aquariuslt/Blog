// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@theme/r-material: post/containers: PostDetail # should call load post when mount post detail components 1`] = `
<inject-with-postStore(Object)
  match={
    Object {
      "isExact": false,
      "params": Object {},
      "path": "/posts/2015/10/25/some-post",
      "url": "/posts/2015/10/25/some-post",
    }
  }
  postStore={
    PostStore {
      "$detail": Object {
        "filename": "some-post",
        "html": "<h1 id=\\"spring-整合-apache-shiro-实现各等级的权限管理\\">Spring 整合 Apache Shiro 实现各等级的权限管理</h1>
<h2 id=\\"background\\">Background</h2>
<p>前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.</p>
<blockquote>
<p>Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication,
authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you
can quickly and easily secure any application – from the smallest mobile applications to the
largest web and enterprise applications.</p>
</blockquote>
<p>在参考过 IBM 开发社区关于Shiro的博客 一篇文章 <a href=\\"https://www.ibm.com/developerworks/cn/java/j-lo-shiro/\\">在Web项目中应用Apache Shiro</a>
与开涛博客的一个跟我学Shiro系列文章 <a href=\\"https://jinnianshilongnian.iteye.com/blog/2024723\\">开涛博客-跟我学Shiro</a></p>
<blockquote>
<p>不得不说的是IBM Developer社区的文章一向属于生动易懂.
但是上面的这篇讲得并没有之前推荐的讲Spring-DataJPA的那篇文章那样浅显,
于是才有了现在这份笔记</p>
</blockquote>
<h2 id=\\"权限控制\\">权限控制</h2>
<p>我所接触到的权限控制大概可以分成两个级别 URL和方法级别.</p>
<p>以常见的论坛用户来举例.论坛用户简要的分成两种 管理员<code>Admin</code>,普通用户<code>Normal</code>.
其中管理员能够进入用户管理,帖子管理的页面进行CRUD操作.
普通用户则只能进行自己帖子的CRU操作,以及顶贴什么的.</p>
<p>如果只进行URL级别的拦截,只需要在每一个URL的访问时 获取用户的角色是<code>Admin</code>还是<code>Normal</code>即可.</p>
<p>如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等).
但是由于跟数据库的设计密切相关,所以这个级别不细讲.
言归正传(不知道是不是看light大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解</p>
<h3 id=\\"url级别的权限控制\\">URL级别的权限控制</h3>
<h4 id=\\"业务场景假设\\">业务场景假设</h4>
<p>首先,我们假设有以下几种种URL</p>
<pre><code>/user/create        //用户创建,Admin专属
/post/create        //发帖 Admin,Normal共有
/login              //登陆
/logout             //注销
</code></pre>
<h4 id=\\"shiro基本配置\\">Shiro基本配置</h4>
<h5 id=\\"maven\\">Maven</h5>
<p><code>$&lt;shiro.version&gt;</code>请自行替换成当前的最新版本</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-core<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-spring<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-web<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-ehcache<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
</code></pre>
<h5 id=\\"webxml\\">web.xml</h5>
<p>为了实现与Spring同一个级别的URL拦截,需要将Shiro的Filter配置在Spring MVC的Dispatcher Servlet同一个级别</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-name</span>&gt;</span>shiroFilter<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-name</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-class</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">init-param</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">param-name</span>&gt;</span>targetFilterLifecycle<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">param-name</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">param-value</span>&gt;</span>true<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">param-value</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">init-param</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-mapping</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-name</span>&gt;</span>shiroFilter<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-name</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">url-pattern</span>&gt;</span>/*<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">url-pattern</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-mapping</span>&gt;</span>
</code></pre>
<h5 id=\\"spring-applicationcontextxml\\">Spring ApplicationContext.xml</h5>
<p>在与Spring进行整合的时候,为了方便拼切配置,在Spring 里面导入另一份专用于Shiro的xml配置</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">import</span> <span class=\\"hljs-attr\\">resource</span>=<span class=\\"hljs-string\\">\\"config/security/applicationContext-shiro-captcha.xml\\"</span>/&gt;</span>
</code></pre>
<h5 id=\\"spring-applicationcontext-shiro-captchaxml\\">Spring applicationContext-shiro-captcha.xml</h5>
<p>先将整个 shiro的xml配置贴出来,接下来在逐一解说其内容</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">beans</span> <span class=\\"hljs-attr\\">xmlns</span>=<span class=\\"hljs-string\\">\\"https://www.springframework.org/schema/beans\\"</span> <span class=\\"hljs-attr\\">xmlns:xsi</span>=<span class=\\"hljs-string\\">\\"https://www.w3.org/2001/XMLSchema-instance\\"</span>
       <span class=\\"hljs-attr\\">xsi:schemaLocation</span>=<span class=\\"hljs-string\\">\\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\\"</span>
       <span class=\\"hljs-attr\\">default-lazy-init</span>=<span class=\\"hljs-string\\">\\"true\\"</span>&gt;</span>

    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">description</span>&gt;</span>Shiro安全配置<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">description</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"realm\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 項目自定义的Realm --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.BookingShiroRealm\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"userService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"userService\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 用户授权信息Cache, 采用EhCache --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.cache.ehcache.EhCacheManager\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManagerConfigFile\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"classpath:config/security/ehcache-shiro.xml\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"lifecycleBeanPostProcessor\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.LifecycleBeanPostProcessor\\"</span>/&gt;</span>


    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"adminPermissionFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.AdminPermissionFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"normalPermissionFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.NormalPermissionFilter\\"</span>/&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- Shiro Filter --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"successUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/booking/search\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"unauthorizedUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
                <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
                <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
                <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
            <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filterChainDefinitions\\"</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">value</span>&gt;</span>
                /=authc
                /register = anon
                /forgot =anon
                /login = anon
                /login/action* = anon
                /logout = logout
                /js/** = anon
                /rest/**=anon
                /image/**=anon
                /jawr_loader.js=anon
                /user/create=roles[admin]
                /post/create/**=roles[normal|admin]
                /** =authc
            <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">value</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">beans</span>&gt;</span>
</code></pre>
<h4 id=\\"配置详解\\">配置详解</h4>
<p>首先要理解一件事情,就是Shiro的权限控制 源自于Web.xml的Filter,在Filter中获取目标URL的请求,解析以达到根据请求是否到达下一集Filter的作用.
再要理解一件约定大于配置的问题,了解Shiro的一些默认配置解说.</p>
<p>在贴出来的<code>shiro-captcha.xml</code>配置代码中:</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-comment\\">&lt;!-- Shiro Filter --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"successUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/booking/search\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"unauthorizedUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
            <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
            <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filterChainDefinitions\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">value</span>&gt;</span>
            /=authc
            /register = anon
            /forgot =anon
            /login = anon
            /login/action* = anon
            /logout = logout
            /js/** = anon
            /rest/**=anon
            /image/**=anon
            /jawr_loader.js=anon
            /user/create=roles[admin]
            /post/create/**=roles[normal|admin]
            /** =authc
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">value</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>
</code></pre>
<p>先来看<code>&lt;property name=&quot;filterChainDefinitions&quot;&gt;</code>中的属性.
&lt;values&gt;的内容,其实是url对应权限的一些mapping.表示对应的url mapping 需要对应的权限.
其中<code>authc</code>,<code>anon</code>,<code>logout</code>样例中提及的这三个,是Shiro自己的默认配置</p>
<blockquote>
<p><code>authc</code>表示,这这个mapping代表的url需要登陆之后才能查看
<code>anon</code>表示,这个mapping代表的url全部放行,所以可以看到所有js文件与image文件都被放行了
<code>logout</code> 表示这个mapping代表的url将进行一次注销操作,在浏览器客户端进行的是session的注销,在服务器端则是进行缓存的删除</p>
</blockquote>
<p>其中 <code>roles[admin],roles[normal|admin]</code> 则是自己定义的过滤规则.
表示<code>/user/create</code>只有角色包含<code>admin</code>的有权限访问
且<code>/post/create</code>则是角色是<code>admin</code>或<code>normal</code>的有权限访问</p>
<h5 id=\\"登录与注销\\">登录与注销</h5>
<h6 id=\\"登录\\">登录</h6>
<p>对于所有需要登录的URL可以通过 <code>authc</code>一个拦截器来拦截
在未登录的状态下,所有所有需要登录的URL都是自动跳转到上面XML所配置的<code>loginUrl</code>之中.
当然这里返回的是 一个对 <code>/login</code>路径的get请求</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
</code></pre>
<h6 id=\\"注销\\">注销</h6>
<p>注销也很简单,只要任意url能够跳转到<code>/logout</code>,便会自动注销.</p>
<h5 id=\\"同步登录与异步登陆\\">同步登录与异步登陆</h5>
<p>其实在Shiro的配置中,通过阅读源码可以看出,其实<code>loginUrl</code>一个属性,代表的是
当Method=Get的请求到达其值对应的url(/login)时,返回登录的页面.
当Method=Post的请求到达其值对应的url(/login)时,进入到的就是Shiro本身的登陆操作
该操作,通过读取<code>securityManager</code>的配置,</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
</code></pre>
<p>通过自定义的realm <code>BookingShiroRealm</code></p>
<blockquote>
<p>此处<code>BookingShiroRealm</code>是自己定义的名称,只是为了符合但是的业务需要起的名字</p>
</blockquote>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-comment\\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"realm\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

<span class=\\"hljs-comment\\">&lt;!-- 項目自定义的Realm --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.BookingShiroRealm\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"userService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"userService\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>
</code></pre>
<p>接下来解说一下
<code>BookingShiroRealm.java</code>
的内容</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">BookingShiroRealm</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">AuthorizingRealm</span> </span>{
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String LOGIN_SESSION_NAME=<span class=\\"hljs-string\\">\\"loginSession\\"</span>;
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String SIMPLE_AUTHORIZATION_INFO=<span class=\\"hljs-string\\">\\"simpleAuthorizationInfo\\"</span>;

    <span class=\\"hljs-keyword\\">private</span> LoginSessionService loginSessionService;

    <span class=\\"hljs-keyword\\">private</span> UserService userService;


    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> LoginSessionService <span class=\\"hljs-title\\">getLoginSessionService</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> loginSessionService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setLoginSessionService</span><span class=\\"hljs-params\\">(LoginSessionService loginSessionService)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.loginSessionService = loginSessionService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> UserService <span class=\\"hljs-title\\">getUserService</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> userService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setUserService</span><span class=\\"hljs-params\\">(UserService userService)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.userService = userService;
    }

    <span class=\\"hljs-comment\\">/*授权信息*/</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthorizationInfo <span class=\\"hljs-title\\">doGetAuthorizationInfo</span><span class=\\"hljs-params\\">(PrincipalCollection principals)</span> </span>{
        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
        <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\\"hljs-keyword\\">null</span>){
            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
        }
        <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\\"hljs-keyword\\">null</span>){

            UserDto userDto=userService.findUserById(loginSession.getUserId());
            <span class=\\"hljs-keyword\\">if</span> (userDto != <span class=\\"hljs-keyword\\">null</span>) {
                SimpleAuthorizationInfo info = <span class=\\"hljs-keyword\\">new</span> SimpleAuthorizationInfo();
                Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
                <span class=\\"hljs-keyword\\">for</span>(RoleDto roleDto:roleDtoSet){
                    info.addRole(roleDto.getName().toLowerCase());
                }

                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
            } <span class=\\"hljs-keyword\\">else</span> {
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
            }
        }
        <span class=\\"hljs-keyword\\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
    }

    <span class=\\"hljs-comment\\">/*认证信息*/</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthenticationInfo <span class=\\"hljs-title\\">doGetAuthenticationInfo</span><span class=\\"hljs-params\\">(AuthenticationToken authenticationToken)</span> <span class=\\"hljs-keyword\\">throws</span> AuthenticationException </span>{
        System.out.println(<span class=\\"hljs-string\\">\\"Come to BookingShiroRealm\\"</span>);
        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;
        String userId=token.getUsername();
        String cryptedPassword= String.valueOf(token.getPassword());
        <span class=\\"hljs-keyword\\">if</span>(StringUtils.isNotEmpty(userId)){
            UserDto targetUser=userService.getByUserId(userId);
            System.out.println(<span class=\\"hljs-string\\">\\"TargetUser:\\"</span>+userId+<span class=\\"hljs-string\\">\\" InputPassWord:\\"</span>+cryptedPassword+<span class=\\"hljs-string\\">\\" DB PassWord:\\"</span>+targetUser.getCryptedPassword());
            <span class=\\"hljs-keyword\\">if</span>(cryptedPassword.equals(targetUser.getCryptedPassword())){
                System.out.println(<span class=\\"hljs-string\\">\\"BookingShiroRealm:Login Success\\"</span>);
                LoginSession loginSession=<span class=\\"hljs-keyword\\">new</span> LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());
                loginSessionService.clearSessionByUserId(userId);
                loginSessionService.save(loginSession);
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());
            }
        }
        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
    }
}

</code></pre>
<p><code>AuthorizingRealm</code>是Shiro负责身份认证的抽象类.
需要实现其<code>doGetAuthenticationInfo</code>方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程.
和实现其<code>doGetAuthorizationInfo</code>方法,实现对需要登陆之后 对权限的认证.</p>
<p>在说到登陆的校验之前,可以看到在<code>doGetAuthenticationInfo</code>方法里面 有一个authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢.
此时返回来回到Spring配置Shiro的xml <code>applicationContext-shiro-captcha.xml</code>
会发现</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"roles[admin]\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"roles[normal]\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
</code></pre>
<p>里面会有一个<code>captchaFilter</code>,
指向其注入的类 <code>CaptchaFormAuthenticationFilter.java</code></p>
<p>附上<code>CaptchaFormAuthenticationFilter</code>代码</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">CaptchaFormAuthenticationFilter</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">FormAuthenticationFilter</span> </span>{

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String DEFAULT_CAPTCHA_PARAM = <span class=\\"hljs-string\\">\\"captcha\\"</span>;

    <span class=\\"hljs-keyword\\">private</span> String captchaParam = DEFAULT_CAPTCHA_PARAM;

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getCaptchaParam</span><span class=\\"hljs-params\\">()</span> </span>{

        <span class=\\"hljs-keyword\\">return</span> captchaParam;

    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> String <span class=\\"hljs-title\\">getCaptcha</span><span class=\\"hljs-params\\">(ServletRequest request)</span> </span>{

        <span class=\\"hljs-keyword\\">return</span> WebUtils.getCleanParam(request, getCaptchaParam());

    }

    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">boolean</span> <span class=\\"hljs-title\\">onLoginFailure</span><span class=\\"hljs-params\\">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> </span>{
        setFailureAttribute(request, e);
        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">true</span>;
    }

    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setFailureAttribute</span><span class=\\"hljs-params\\">(ServletRequest request, AuthenticationException ae)</span> </span>{
        String className = ae.getClass().getName();
        request.setAttribute(getFailureKeyAttribute(), className);
    }

    <span class=\\"hljs-comment\\">//这里进行密码的加密</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> CaptchaUsernamePasswordToken <span class=\\"hljs-title\\">createToken</span><span class=\\"hljs-params\\">(ServletRequest request, ServletResponse response)</span> </span>{
        System.out.println(<span class=\\"hljs-string\\">\\"Come to CreateToken\\"</span>);
        String username = getUsername(request);
        String password = getPassword(request);
        String captcha = getCaptcha(request);
        <span class=\\"hljs-keyword\\">boolean</span> rememberMe = isRememberMe(request);
        String host = getHost(request);

        System.out.println(<span class=\\"hljs-string\\">\\"Captcha UserName(UserId):\\"</span> + username);
        System.out.println(<span class=\\"hljs-string\\">\\"Captcha Password:\\"</span> + password);
        System.out.println(<span class=\\"hljs-string\\">\\"Captcha RememberMe:\\"</span> + rememberMe);


        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> CaptchaUsernamePasswordToken(username,
                password.toCharArray(), rememberMe, host, captcha);

    }


    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">boolean</span> <span class=\\"hljs-title\\">executeLogin</span><span class=\\"hljs-params\\">(ServletRequest request, ServletResponse response)</span> <span class=\\"hljs-keyword\\">throws</span> Exception </span>{
        CaptchaUsernamePasswordToken token = createToken(request, response);

        <span class=\\"hljs-keyword\\">try</span> {
            System.out.println(<span class=\\"hljs-string\\">\\"Execute Login~\\"</span>);
            Subject subject = getSubject(request, response);
            subject.login(token);

            <span class=\\"hljs-keyword\\">return</span> onLoginSuccess(token,subject, request, response);
        } <span class=\\"hljs-keyword\\">catch</span> (AuthenticationException e) {
            <span class=\\"hljs-keyword\\">return</span> onLoginFailure(token,e, request, response);
        }
    }
}
</code></pre>
<p>继承<code>FormAuthenticationFilter</code>的<code>CaptchaFormAuthenticationFilter</code>并重写其<code>CaptchaUsernamePasswordToken</code>方法.
用于通过<code>/login</code>的POST方式提交过来的时候,便会先经过此filter的<code>createToken</code>方法进行token的生成</p>
<p>假设有一个登陆页面的<code>/login</code>使用同步提交方式,即通过页面的form表单,<code>action=&quot;/login&quot;</code>,<code>method=&quot;POST&quot;</code>提交到后台,触发流程是</p>
<blockquote>
<ol>
<li>到达 <code>FormAuthenticationFilter</code> 根据表单 生成Token.</li>
<li>调用 Shiro专门处理认证的 <code>subject</code>其<code>login</code>方法进行登陆</li>
<li><code>login</code>方法 通过调用 自定义的<code>BookingShiroRealm</code>方法所实现的顶级接口 来实现对数据库的信息的读取</li>
<li>判定登陆用户名与密码 匹配之后,可以通过Shiro自己配置的缓存保存认证信息.</li>
</ol>
</blockquote>
<p>但是在这个时代,还通过同步登陆 实在是太TM捞了,其实异步登陆提交,只需要 手动调用subject.login方法即可
将第一步到达<code>FormAuthenticationFilter</code>的token手动生成</p>
<p>异步登陆的实现代码 大概如下(以Controller为例)</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-meta\\">@RequestMapping</span>(value = <span class=\\"hljs-string\\">\\"/action\\"</span>, method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
<span class=\\"hljs-meta\\">@ResponseBody</span>
<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> LoginMessage <span class=\\"hljs-title\\">loginAction</span><span class=\\"hljs-params\\">(
        @RequestParam(value = <span class=\\"hljs-string\\">\\"username\\"</span>)</span> String username,
        @<span class=\\"hljs-title\\">RequestParam</span><span class=\\"hljs-params\\">(value = <span class=\\"hljs-string\\">\\"password\\"</span>)</span> String password,
        @<span class=\\"hljs-title\\">RequestParam</span><span class=\\"hljs-params\\">(value = <span class=\\"hljs-string\\">\\"rememberMe\\"</span>, required = <span class=\\"hljs-keyword\\">false</span>, defaultValue = <span class=\\"hljs-string\\">\\"false\\"</span>)</span> <span class=\\"hljs-keyword\\">boolean</span> rememberMe,
        ServletRequest request) </span>{
    LoginMessage loginMessage = <span class=\\"hljs-keyword\\">new</span> LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());
    Subject subject = SecurityUtils.getSubject();


    <span class=\\"hljs-comment\\">//尝试获取 跳转到Login前的那个页面的url</span>
    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">null</span> != WebUtils.getSavedRequest(request)) {
        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();
        loginMessage.setRedirect(requestURI);
    }

    <span class=\\"hljs-keyword\\">try</span> {
        String salt=userService.getByUserId(username).getSalt();
        UsernamePasswordToken token = <span class=\\"hljs-keyword\\">new</span> UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));
        subject.login(token);
        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());

        <span class=\\"hljs-comment\\">//尝试判断 用户是不是第一次登陆</span>
        UserDto currentUser=userService.getByUserId(username);
        <span class=\\"hljs-keyword\\">if</span> (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){
            String redirectPath=request.getServletContext().getContextPath()+<span class=\\"hljs-string\\">\\"/user/password/reset\\"</span>;
            loginMessage.setRedirect(redirectPath);
        }


    } <span class=\\"hljs-keyword\\">catch</span> (UnknownAccountException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());
    } <span class=\\"hljs-keyword\\">catch</span> (IncorrectCredentialsException |NullPointerException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());
    } <span class=\\"hljs-keyword\\">catch</span> (AuthenticationException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());
    }
    <span class=\\"hljs-keyword\\">return</span> loginMessage;
}

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">LoginMessage</span> </span>{
    <span class=\\"hljs-keyword\\">private</span> String status;
    <span class=\\"hljs-keyword\\">private</span> String message;
    <span class=\\"hljs-keyword\\">private</span> String redirect;

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-title\\">LoginMessage</span><span class=\\"hljs-params\\">(String status)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.status = status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getStatus</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setStatus</span><span class=\\"hljs-params\\">(String status)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.status = status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getMessage</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> message;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setMessage</span><span class=\\"hljs-params\\">(String message)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.message = message;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getRedirect</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> redirect;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setRedirect</span><span class=\\"hljs-params\\">(String redirect)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.redirect = redirect;
    }
}
</code></pre>
<h5 id=\\"角色校验\\">角色校验</h5>
<p>登陆的时候,其实只是实现了 <code>登陆认证</code>,<code>缓存登录信息</code>的过程.
并没有实现,<code>权限赋予</code>的过程.只有第一次遇到 需要登陆且特定权限的url的时候,才会请求后台是否有进入对应url的权限.</p>
<p>在讲权限之前,概括一下数据库的设计</p>
<pre><code class=\\"hljs SQL\\"><span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> <span class=\\"hljs-keyword\\">USERS</span>
(
    <span class=\\"hljs-keyword\\">ID</span> <span class=\\"hljs-built_in\\">BIGINT</span> PRIMARY <span class=\\"hljs-keyword\\">KEY</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span> AUTO_INCREMENT,
    ACTIVE <span class=\\"hljs-built_in\\">BIT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    ADDRESS <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">300</span>),
    CITY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    COMPANY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    COUNTRY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    CRYPTED_PASSWORD <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>),
    DEPARTMENT <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    DISPLAY_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">128</span>),
    EMAIL <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">60</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    FAX <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    FIRST_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    GENDER <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">6</span>),
    JOBTITLE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    LAST_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    LOCATION <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    MIDDLE_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    OFFICE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    OFFICECODE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">22</span>),
    PHONE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">128</span>),
    <span class=\\"hljs-keyword\\">SALT</span> <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    STAFFID <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    STAFFROLE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">15</span>),
    TERRITORY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    USERID <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>
);


<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> <span class=\\"hljs-keyword\\">ROLES</span>
(
    <span class=\\"hljs-keyword\\">ID</span> <span class=\\"hljs-built_in\\">BIGINT</span> PRIMARY <span class=\\"hljs-keyword\\">KEY</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span> AUTO_INCREMENT,
    DESCRIPTION <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>),
    <span class=\\"hljs-keyword\\">NAME</span> <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>
);
<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">UNIQUE</span> <span class=\\"hljs-keyword\\">INDEX</span> UK_OFX66KERUAPI6VYQPV6F2OR37 <span class=\\"hljs-keyword\\">ON</span> <span class=\\"hljs-keyword\\">ROLES</span> (<span class=\\"hljs-keyword\\">NAME</span>);

<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> ROLE_USER
(
    ROLE_ID <span class=\\"hljs-built_in\\">BIGINT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    USER_ID <span class=\\"hljs-built_in\\">BIGINT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    PRIMARY <span class=\\"hljs-keyword\\">KEY</span> (ROLE_ID, USER_ID),
    <span class=\\"hljs-keyword\\">FOREIGN</span> <span class=\\"hljs-keyword\\">KEY</span> (ROLE_ID) <span class=\\"hljs-keyword\\">REFERENCES</span> <span class=\\"hljs-keyword\\">ROLES</span> (<span class=\\"hljs-keyword\\">ID</span>),
    <span class=\\"hljs-keyword\\">FOREIGN</span> <span class=\\"hljs-keyword\\">KEY</span> (USER_ID) <span class=\\"hljs-keyword\\">REFERENCES</span> <span class=\\"hljs-keyword\\">USERS</span> (<span class=\\"hljs-keyword\\">ID</span>)
);

<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">INDEX</span> FK_NJAJEL6A2Q8TR36EMB9L8VW7N <span class=\\"hljs-keyword\\">ON</span> ROLE_USER (USER_ID);

</code></pre>
<p>数据库有三个表 <code>USERS</code>,<code>ROLES</code>,<code>USER_ROLE</code>
其实在设计上<code>User</code>表跟<code>ROLE</code>表是多对多的关系,即User里面有一个Set&lt;Role&gt;,Role里面也有一个Set&lt;User&gt;
通过中间表<code>USER_ROLE</code>来实现多对多关联.</p>
<p>下面来看 身份认证的具体实现
<code>BookingShiroRealm.java</code></p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthorizationInfo <span class=\\"hljs-title\\">doGetAuthorizationInfo</span><span class=\\"hljs-params\\">(PrincipalCollection principals)</span> </span>{
    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
    <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\\"hljs-keyword\\">null</span>){
        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
    }
    <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\\"hljs-keyword\\">null</span>){

        UserDto userDto=userService.findUserById(loginSession.getUserId());
        <span class=\\"hljs-keyword\\">if</span> (userDto != <span class=\\"hljs-keyword\\">null</span>) {
            SimpleAuthorizationInfo info = <span class=\\"hljs-keyword\\">new</span> SimpleAuthorizationInfo();
            Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
            <span class=\\"hljs-keyword\\">for</span>(RoleDto roleDto:roleDtoSet){
                info.addRole(roleDto.getName().toLowerCase());
            }

            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
        } <span class=\\"hljs-keyword\\">else</span> {
            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
        }
    }
    <span class=\\"hljs-keyword\\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
}
</code></pre>
<p>通过</p>
<pre><code class=\\"hljs Java\\">Subject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)
</code></pre>
<p>来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在Session里面.
当需要对应的权限,且发现已经有<code>SIMPLE_AUTHORIZATION_INFO</code>这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.</p>
<p>当然 对应权限的获取,也是通过shiro 配置里面的captchaFilter的具体实现类,实现其<code>isAccessAllowed</code>方法来判定.</p>
<h2 id=\\"summary\\">Summary</h2>
<p>本次主要分享了Share 如何在Spring中整合Apache Shiro的过程.
但是整体配置依然是通过XML统一配置,其实Shiro在近期的版本已经有了Annotation级别的方法能够方便的对URL的Mapping进行注解.
具体的应用过程,就像Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.</p>
",
        "images": Array [],
        "md": "# Spring 整合 Apache Shiro 实现各等级的权限管理

\`\`\`metadata
title: Spring 整合 Apache Shiro 实现各等级的权限管理
created: 2015-10-25
updated: 2015-10-25
category: Blog
tags:
- Spring
- Security
- Shiro
- Java
\`\`\`


## Background

前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.

> Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication,
> authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you
> can quickly and easily secure any application – from the smallest mobile applications to the
> largest web and enterprise applications.


在参考过 IBM 开发社区关于Shiro的博客 一篇文章 [在Web项目中应用Apache Shiro](https://www.ibm.com/developerworks/cn/java/j-lo-shiro/)
与开涛博客的一个跟我学Shiro系列文章 [开涛博客-跟我学Shiro](https://jinnianshilongnian.iteye.com/blog/2024723)

> 不得不说的是IBM Developer社区的文章一向属于生动易懂.
> 但是上面的这篇讲得并没有之前推荐的讲Spring-DataJPA的那篇文章那样浅显,
> 于是才有了现在这份笔记


## 权限控制

我所接触到的权限控制大概可以分成两个级别 URL和方法级别.


以常见的论坛用户来举例.论坛用户简要的分成两种 管理员\`Admin\`,普通用户\`Normal\`.
其中管理员能够进入用户管理,帖子管理的页面进行CRUD操作.
普通用户则只能进行自己帖子的CRU操作,以及顶贴什么的.

如果只进行URL级别的拦截,只需要在每一个URL的访问时 获取用户的角色是\`Admin\`还是\`Normal\`即可.

如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等).
但是由于跟数据库的设计密切相关,所以这个级别不细讲.
言归正传(不知道是不是看light大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解

### URL级别的权限控制

#### 业务场景假设

首先,我们假设有以下几种种URL
\`\`\`
/user/create        //用户创建,Admin专属
/post/create        //发帖 Admin,Normal共有
/login              //登陆
/logout             //注销
\`\`\`

#### Shiro基本配置

##### Maven
\`$<shiro.version>\`请自行替换成当前的最新版本
\`\`\`xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-core</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-web</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-ehcache</artifactId>
    <version>\${shiro.version}</version>
</dependency>
\`\`\`

##### web.xml
为了实现与Spring同一个级别的URL拦截,需要将Shiro的Filter配置在Spring MVC的Dispatcher Servlet同一个级别
\`\`\`xml
<filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
        <param-name>targetFilterLifecycle</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
\`\`\`

##### Spring ApplicationContext.xml
在与Spring进行整合的时候,为了方便拼切配置,在Spring 里面导入另一份专用于Shiro的xml配置
\`\`\`xml
<import resource=\\"config/security/applicationContext-shiro-captcha.xml\\"/>
\`\`\`

##### Spring applicationContext-shiro-captcha.xml
先将整个 shiro的xml配置贴出来,接下来在逐一解说其内容
\`\`\`xml
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<beans xmlns=\\"https://www.springframework.org/schema/beans\\" xmlns:xsi=\\"https://www.w3.org/2001/XMLSchema-instance\\"
       xsi:schemaLocation=\\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\\"
       default-lazy-init=\\"true\\">

    <description>Shiro安全配置</description>

    <!-- Shiro's main business-tier object for web-enabled applications -->
    <bean id=\\"securityManager\\" class=\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\">
        <property name=\\"realm\\" ref=\\"shiroRealm\\"/>
        <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id=\\"shiroRealm\\" class=\\"com.quariuslt.service.security.BookingShiroRealm\\">
        <property name=\\"loginSessionService\\" ref=\\"loginSessionService\\"/>
        <property name=\\"userService\\" ref=\\"userService\\"/>
        <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
    </bean>

    <!-- 用户授权信息Cache, 采用EhCache -->
    <bean id=\\"shiroEhcacheManager\\" class=\\"org.apache.shiro.cache.ehcache.EhCacheManager\\">
        <property name=\\"cacheManagerConfigFile\\" value=\\"classpath:config/security/ehcache-shiro.xml\\"/>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id=\\"lifecycleBeanPostProcessor\\" class=\\"org.apache.shiro.spring.LifecycleBeanPostProcessor\\"/>


    <bean class=\\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\\">
        <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
    </bean>

    <bean id=\\"captchaFilter\\" class=\\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\\"/>
    <bean id=\\"adminPermissionFilter\\" class=\\"com.quariuslt.service.security.AdminPermissionFilter\\"/>
    <bean id=\\"normalPermissionFilter\\" class=\\"com.quariuslt.service.security.NormalPermissionFilter\\"/>

    <!-- Shiro Filter -->
    <bean id=\\"shiroFilter\\" class=\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\">
        <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
        <property name=\\"loginUrl\\" value=\\"/login\\"/>
        <property name=\\"successUrl\\" value=\\"/booking/search\\"/>
        <property name=\\"unauthorizedUrl\\" value=\\"/\\"/>
        <property name=\\"filters\\">
            <map>
                <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
                <!--<entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>-->
                <!--<entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>-->
            </map>
        </property>
        <property name=\\"filterChainDefinitions\\">
            <value>
                /=authc
                /register = anon
                /forgot =anon
                /login = anon
                /login/action* = anon
                /logout = logout
                /js/** = anon
                /rest/**=anon
                /image/**=anon
                /jawr_loader.js=anon
                /user/create=roles[admin]
                /post/create/**=roles[normal|admin]
                /** =authc
            </value>
        </property>
    </bean>

</beans>
\`\`\`

#### 配置详解
首先要理解一件事情,就是Shiro的权限控制 源自于Web.xml的Filter,在Filter中获取目标URL的请求,解析以达到根据请求是否到达下一集Filter的作用.
再要理解一件约定大于配置的问题,了解Shiro的一些默认配置解说.

在贴出来的\`shiro-captcha.xml\`配置代码中:
\`\`\`xml
<!-- Shiro Filter -->
<bean id=\\"shiroFilter\\" class=\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\">
    <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
    <property name=\\"loginUrl\\" value=\\"/login\\"/>
    <property name=\\"successUrl\\" value=\\"/booking/search\\"/>
    <property name=\\"unauthorizedUrl\\" value=\\"/\\"/>
    <property name=\\"filters\\">
        <map>
            <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
            <!--<entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>-->
            <!--<entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>-->
        </map>
    </property>
    <property name=\\"filterChainDefinitions\\">
        <value>
            /=authc
            /register = anon
            /forgot =anon
            /login = anon
            /login/action* = anon
            /logout = logout
            /js/** = anon
            /rest/**=anon
            /image/**=anon
            /jawr_loader.js=anon
            /user/create=roles[admin]
            /post/create/**=roles[normal|admin]
            /** =authc
        </value>
    </property>
</bean>
\`\`\`
先来看\`<property name=\\"filterChainDefinitions\\">\`中的属性.
<values>的内容,其实是url对应权限的一些mapping.表示对应的url mapping 需要对应的权限.
其中\`authc\`,\`anon\`,\`logout\`样例中提及的这三个,是Shiro自己的默认配置
> \`authc\`表示,这这个mapping代表的url需要登陆之后才能查看
> \`anon\`表示,这个mapping代表的url全部放行,所以可以看到所有js文件与image文件都被放行了
> \`logout\` 表示这个mapping代表的url将进行一次注销操作,在浏览器客户端进行的是session的注销,在服务器端则是进行缓存的删除

其中 \`roles[admin],roles[normal|admin]\` 则是自己定义的过滤规则.
表示\`/user/create\`只有角色包含\`admin\`的有权限访问
且\`/post/create\`则是角色是\`admin\`或\`normal\`的有权限访问


##### 登录与注销

###### 登录
对于所有需要登录的URL可以通过 \`authc\`一个拦截器来拦截
在未登录的状态下,所有所有需要登录的URL都是自动跳转到上面XML所配置的\`loginUrl\`之中.
当然这里返回的是 一个对 \`/login\`路径的get请求
\`\`\`xml
<property name=\\"loginUrl\\" value=\\"/login\\"/>
\`\`\`
###### 注销
注销也很简单,只要任意url能够跳转到\`/logout\`,便会自动注销.


##### 同步登录与异步登陆
其实在Shiro的配置中,通过阅读源码可以看出,其实\`loginUrl\`一个属性,代表的是
当Method=Get的请求到达其值对应的url(/login)时,返回登录的页面.
当Method=Post的请求到达其值对应的url(/login)时,进入到的就是Shiro本身的登陆操作
该操作,通过读取\`securityManager\`的配置,
\`\`\`xml
<property name=\\"securityManager\\" ref=\\"securityManager\\"/>
\`\`\`

通过自定义的realm \`BookingShiroRealm\`
> 此处\`BookingShiroRealm\`是自己定义的名称,只是为了符合但是的业务需要起的名字

\`\`\`xml
<!-- Shiro's main business-tier object for web-enabled applications -->
<bean id=\\"securityManager\\" class=\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\">
    <property name=\\"realm\\" ref=\\"shiroRealm\\"/>
    <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
</bean>

<!-- 項目自定义的Realm -->
<bean id=\\"shiroRealm\\" class=\\"com.quariuslt.service.security.BookingShiroRealm\\">
    <property name=\\"loginSessionService\\" ref=\\"loginSessionService\\"/>
    <property name=\\"userService\\" ref=\\"userService\\"/>
    <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
</bean>
\`\`\`

接下来解说一下
\`BookingShiroRealm.java\`
的内容

\`\`\`Java
public class BookingShiroRealm extends AuthorizingRealm {
    public static final String LOGIN_SESSION_NAME=\\"loginSession\\";
    public static final String SIMPLE_AUTHORIZATION_INFO=\\"simpleAuthorizationInfo\\";

    private LoginSessionService loginSessionService;

    private UserService userService;


    public LoginSessionService getLoginSessionService() {
        return loginSessionService;
    }

    public void setLoginSessionService(LoginSessionService loginSessionService) {
        this.loginSessionService = loginSessionService;
    }

    public UserService getUserService() {
        return userService;
    }

    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /*授权信息*/
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
        if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){
            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
        }
        if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){

            UserDto userDto=userService.findUserById(loginSession.getUserId());
            if (userDto != null) {
                SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
                Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
                for(RoleDto roleDto:roleDtoSet){
                    info.addRole(roleDto.getName().toLowerCase());
                }

                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
            } else {
                return null;
            }
        }
        return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
    }

    /*认证信息*/
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        System.out.println(\\"Come to BookingShiroRealm\\");
        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;
        String userId=token.getUsername();
        String cryptedPassword= String.valueOf(token.getPassword());
        if(StringUtils.isNotEmpty(userId)){
            UserDto targetUser=userService.getByUserId(userId);
            System.out.println(\\"TargetUser:\\"+userId+\\" InputPassWord:\\"+cryptedPassword+\\" DB PassWord:\\"+targetUser.getCryptedPassword());
            if(cryptedPassword.equals(targetUser.getCryptedPassword())){
                System.out.println(\\"BookingShiroRealm:Login Success\\");
                LoginSession loginSession=new LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());
                loginSessionService.clearSessionByUserId(userId);
                loginSessionService.save(loginSession);
                return new SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());
            }
        }
        return null;
    }
}

\`\`\`
\`AuthorizingRealm\`是Shiro负责身份认证的抽象类.
需要实现其\`doGetAuthenticationInfo\`方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程.
和实现其\`doGetAuthorizationInfo\`方法,实现对需要登陆之后 对权限的认证.


在说到登陆的校验之前,可以看到在\`doGetAuthenticationInfo\`方法里面 有一个authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢.
此时返回来回到Spring配置Shiro的xml \`applicationContext-shiro-captcha.xml\`
会发现
\`\`\`xml
<property name=\\"filters\\">
    <map>
        <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
        <entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>
        <entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>
    </map>
</property>
\`\`\`
里面会有一个\`captchaFilter\`,
指向其注入的类 \`CaptchaFormAuthenticationFilter.java\`

附上\`CaptchaFormAuthenticationFilter\`代码
\`\`\`Java
public class CaptchaFormAuthenticationFilter extends FormAuthenticationFilter {

    public static final String DEFAULT_CAPTCHA_PARAM = \\"captcha\\";

    private String captchaParam = DEFAULT_CAPTCHA_PARAM;

    public String getCaptchaParam() {

        return captchaParam;

    }

    protected String getCaptcha(ServletRequest request) {

        return WebUtils.getCleanParam(request, getCaptchaParam());

    }

    @Override
    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) {
        setFailureAttribute(request, e);
        return true;
    }

    @Override
    protected void setFailureAttribute(ServletRequest request, AuthenticationException ae) {
        String className = ae.getClass().getName();
        request.setAttribute(getFailureKeyAttribute(), className);
    }

    //这里进行密码的加密
    @Override
    protected CaptchaUsernamePasswordToken createToken(ServletRequest request, ServletResponse response) {
        System.out.println(\\"Come to CreateToken\\");
        String username = getUsername(request);
        String password = getPassword(request);
        String captcha = getCaptcha(request);
        boolean rememberMe = isRememberMe(request);
        String host = getHost(request);

        System.out.println(\\"Captcha UserName(UserId):\\" + username);
        System.out.println(\\"Captcha Password:\\" + password);
        System.out.println(\\"Captcha RememberMe:\\" + rememberMe);


        return new CaptchaUsernamePasswordToken(username,
                password.toCharArray(), rememberMe, host, captcha);

    }


    @Override
    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception {
        CaptchaUsernamePasswordToken token = createToken(request, response);

        try {
            System.out.println(\\"Execute Login~\\");
            Subject subject = getSubject(request, response);
            subject.login(token);

            return onLoginSuccess(token,subject, request, response);
        } catch (AuthenticationException e) {
            return onLoginFailure(token,e, request, response);
        }
    }
}
\`\`\`
继承\`FormAuthenticationFilter\`的\`CaptchaFormAuthenticationFilter\`并重写其\`CaptchaUsernamePasswordToken\`方法.
用于通过\`/login\`的POST方式提交过来的时候,便会先经过此filter的\`createToken\`方法进行token的生成


假设有一个登陆页面的\`/login\`使用同步提交方式,即通过页面的form表单,\`action=\\"/login\\"\`,\`method=\\"POST\\"\`提交到后台,触发流程是
> 1. 到达 \`FormAuthenticationFilter\` 根据表单 生成Token.
> 2. 调用 Shiro专门处理认证的 \`subject\`其\`login\`方法进行登陆
> 3. \`login\`方法 通过调用 自定义的\`BookingShiroRealm\`方法所实现的顶级接口 来实现对数据库的信息的读取
> 4. 判定登陆用户名与密码 匹配之后,可以通过Shiro自己配置的缓存保存认证信息.

但是在这个时代,还通过同步登陆 实在是太TM捞了,其实异步登陆提交,只需要 手动调用subject.login方法即可
将第一步到达\`FormAuthenticationFilter\`的token手动生成

异步登陆的实现代码 大概如下(以Controller为例)
\`\`\`Java
@RequestMapping(value = \\"/action\\", method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
@ResponseBody
public LoginMessage loginAction(
        @RequestParam(value = \\"username\\") String username,
        @RequestParam(value = \\"password\\") String password,
        @RequestParam(value = \\"rememberMe\\", required = false, defaultValue = \\"false\\") boolean rememberMe,
        ServletRequest request) {
    LoginMessage loginMessage = new LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());
    Subject subject = SecurityUtils.getSubject();


    //尝试获取 跳转到Login前的那个页面的url
    if(null != WebUtils.getSavedRequest(request)) {
        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();
        loginMessage.setRedirect(requestURI);
    }

    try {
        String salt=userService.getByUserId(username).getSalt();
        UsernamePasswordToken token = new UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));
        subject.login(token);
        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());

        //尝试判断 用户是不是第一次登陆
        UserDto currentUser=userService.getByUserId(username);
        if (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){
            String redirectPath=request.getServletContext().getContextPath()+\\"/user/password/reset\\";
            loginMessage.setRedirect(redirectPath);
        }


    } catch (UnknownAccountException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());
    } catch (IncorrectCredentialsException |NullPointerException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());
    } catch (AuthenticationException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());
    }
    return loginMessage;
}

class LoginMessage {
    private String status;
    private String message;
    private String redirect;

    public LoginMessage(String status) {
        this.status = status;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getRedirect() {
        return redirect;
    }

    public void setRedirect(String redirect) {
        this.redirect = redirect;
    }
}
\`\`\`


##### 角色校验
登陆的时候,其实只是实现了 \`登陆认证\`,\`缓存登录信息\`的过程.
并没有实现,\`权限赋予\`的过程.只有第一次遇到 需要登陆且特定权限的url的时候,才会请求后台是否有进入对应url的权限.

在讲权限之前,概括一下数据库的设计
\`\`\`SQL
CREATE TABLE USERS
(
    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    ACTIVE BIT NOT NULL,
    ADDRESS VARCHAR(300),
    CITY VARCHAR(50),
    COMPANY VARCHAR(20),
    COUNTRY VARCHAR(50),
    CRYPTED_PASSWORD VARCHAR(255),
    DEPARTMENT VARCHAR(20),
    DISPLAY_NAME VARCHAR(128),
    EMAIL VARCHAR(60) NOT NULL,
    FAX VARCHAR(100),
    FIRST_NAME VARCHAR(40),
    GENDER VARCHAR(6),
    JOBTITLE VARCHAR(100),
    LAST_NAME VARCHAR(40),
    LOCATION VARCHAR(50),
    MIDDLE_NAME VARCHAR(40),
    OFFICE VARCHAR(20),
    OFFICECODE VARCHAR(22),
    PHONE VARCHAR(128),
    SALT VARCHAR(255) NOT NULL,
    STAFFID VARCHAR(20),
    STAFFROLE VARCHAR(15),
    TERRITORY VARCHAR(100),
    USERID VARCHAR(20) NOT NULL
);


CREATE TABLE ROLES
(
    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    DESCRIPTION VARCHAR(255),
    NAME VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX UK_OFX66KERUAPI6VYQPV6F2OR37 ON ROLES (NAME);

CREATE TABLE ROLE_USER
(
    ROLE_ID BIGINT NOT NULL,
    USER_ID BIGINT NOT NULL,
    PRIMARY KEY (ROLE_ID, USER_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID)
);

CREATE INDEX FK_NJAJEL6A2Q8TR36EMB9L8VW7N ON ROLE_USER (USER_ID);

\`\`\`
数据库有三个表 \`USERS\`,\`ROLES\`,\`USER_ROLE\`
其实在设计上\`User\`表跟\`ROLE\`表是多对多的关系,即User里面有一个Set<Role>,Role里面也有一个Set<User>
通过中间表\`USER_ROLE\`来实现多对多关联.

下面来看 身份认证的具体实现
\`BookingShiroRealm.java\`
\`\`\`Java
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
    if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){
        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
    }
    if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){

        UserDto userDto=userService.findUserById(loginSession.getUserId());
        if (userDto != null) {
            SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
            Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
            for(RoleDto roleDto:roleDtoSet){
                info.addRole(roleDto.getName().toLowerCase());
            }

            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
        } else {
            return null;
        }
    }
    return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
}
\`\`\`
通过
\`\`\`Java
Subject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)
\`\`\`
来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在Session里面.
当需要对应的权限,且发现已经有\`SIMPLE_AUTHORIZATION_INFO\`这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.

当然 对应权限的获取,也是通过shiro 配置里面的captchaFilter的具体实现类,实现其\`isAccessAllowed\`方法来判定.











## Summary
本次主要分享了Share 如何在Spring中整合Apache Shiro的过程.
但是整体配置依然是通过XML统一配置,其实Shiro在近期的版本已经有了Annotation级别的方法能够方便的对URL的Mapping进行注解.
具体的应用过程,就像Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.
",
        "metadata": Object {
          "category": "Blog",
          "cover": "https://picsum.photos/id/126/800/300",
          "created": "2015-10-25",
          "tags": Array [
            "Spring",
            "Security",
            "Shiro",
            "Java",
          ],
          "title": "Spring 整合 Apache Shiro 实现各等级的权限管理",
          "updated": "2015-10-25",
        },
        "permalink": "/2015/10/25/apache-shiro-spring-integration",
        "summary": "前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.Apache Shiro i",
        "toc": Array [
          Object {
            "children": Array [
              Object {
                "children": Array [],
                "id": "background",
                "label": "Background",
                "level": 2,
                "pid": 0,
                "position": 1,
              },
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "children": Array [],
                        "id": "业务场景假设",
                        "label": "业务场景假设",
                        "level": 4,
                        "pid": 3,
                        "position": 4,
                      },
                      Object {
                        "children": Array [
                          Object {
                            "children": Array [],
                            "id": "maven",
                            "label": "Maven",
                            "level": 5,
                            "pid": 5,
                            "position": 6,
                          },
                          Object {
                            "children": Array [],
                            "id": "webxml",
                            "label": "web.xml",
                            "level": 5,
                            "pid": 5,
                            "position": 7,
                          },
                          Object {
                            "children": Array [],
                            "id": "spring-applicationcontextxml",
                            "label": "Spring ApplicationContext.xml",
                            "level": 5,
                            "pid": 5,
                            "position": 8,
                          },
                          Object {
                            "children": Array [],
                            "id": "spring-applicationcontext-shiro-captchaxml",
                            "label": "Spring applicationContext-shiro-captcha.xml",
                            "level": 5,
                            "pid": 5,
                            "position": 9,
                          },
                        ],
                        "id": "shiro基本配置",
                        "label": "Shiro基本配置",
                        "level": 4,
                        "pid": 3,
                        "position": 5,
                      },
                      Object {
                        "children": Array [
                          Object {
                            "children": Array [
                              Object {
                                "children": Array [],
                                "id": "登录",
                                "label": "登录",
                                "level": 6,
                                "pid": 11,
                                "position": 12,
                              },
                              Object {
                                "children": Array [],
                                "id": "注销",
                                "label": "注销",
                                "level": 6,
                                "pid": 11,
                                "position": 13,
                              },
                            ],
                            "id": "登录与注销",
                            "label": "登录与注销",
                            "level": 5,
                            "pid": 10,
                            "position": 11,
                          },
                          Object {
                            "children": Array [],
                            "id": "同步登录与异步登陆",
                            "label": "同步登录与异步登陆",
                            "level": 5,
                            "pid": 10,
                            "position": 14,
                          },
                          Object {
                            "children": Array [],
                            "id": "角色校验",
                            "label": "角色校验",
                            "level": 5,
                            "pid": 10,
                            "position": 15,
                          },
                        ],
                        "id": "配置详解",
                        "label": "配置详解",
                        "level": 4,
                        "pid": 3,
                        "position": 10,
                      },
                    ],
                    "id": "url级别的权限控制",
                    "label": "URL级别的权限控制",
                    "level": 3,
                    "pid": 2,
                    "position": 3,
                  },
                ],
                "id": "权限控制",
                "label": "权限控制",
                "level": 2,
                "pid": 0,
                "position": 2,
              },
              Object {
                "children": Array [],
                "id": "summary",
                "label": "Summary",
                "level": 2,
                "pid": 0,
                "position": 16,
              },
            ],
            "id": "spring-整合-apache-shiro-实现各等级的权限管理",
            "label": "Spring 整合 Apache Shiro 实现各等级的权限管理",
            "level": 1,
            "pid": -1,
            "position": 0,
          },
        ],
      },
      "$posts": Array [],
      "loaded": false,
    }
  }
>
  <o
    forwardRef={null}
    match={
      Object {
        "isExact": false,
        "params": Object {},
        "path": "/posts/2015/10/25/some-post",
        "url": "/posts/2015/10/25/some-post",
      }
    }
    postStore={
      PostStore {
        "$detail": Object {
          "filename": "some-post",
          "html": "<h1 id=\\"spring-整合-apache-shiro-实现各等级的权限管理\\">Spring 整合 Apache Shiro 实现各等级的权限管理</h1>
<h2 id=\\"background\\">Background</h2>
<p>前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.</p>
<blockquote>
<p>Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication,
authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you
can quickly and easily secure any application – from the smallest mobile applications to the
largest web and enterprise applications.</p>
</blockquote>
<p>在参考过 IBM 开发社区关于Shiro的博客 一篇文章 <a href=\\"https://www.ibm.com/developerworks/cn/java/j-lo-shiro/\\">在Web项目中应用Apache Shiro</a>
与开涛博客的一个跟我学Shiro系列文章 <a href=\\"https://jinnianshilongnian.iteye.com/blog/2024723\\">开涛博客-跟我学Shiro</a></p>
<blockquote>
<p>不得不说的是IBM Developer社区的文章一向属于生动易懂.
但是上面的这篇讲得并没有之前推荐的讲Spring-DataJPA的那篇文章那样浅显,
于是才有了现在这份笔记</p>
</blockquote>
<h2 id=\\"权限控制\\">权限控制</h2>
<p>我所接触到的权限控制大概可以分成两个级别 URL和方法级别.</p>
<p>以常见的论坛用户来举例.论坛用户简要的分成两种 管理员<code>Admin</code>,普通用户<code>Normal</code>.
其中管理员能够进入用户管理,帖子管理的页面进行CRUD操作.
普通用户则只能进行自己帖子的CRU操作,以及顶贴什么的.</p>
<p>如果只进行URL级别的拦截,只需要在每一个URL的访问时 获取用户的角色是<code>Admin</code>还是<code>Normal</code>即可.</p>
<p>如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等).
但是由于跟数据库的设计密切相关,所以这个级别不细讲.
言归正传(不知道是不是看light大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解</p>
<h3 id=\\"url级别的权限控制\\">URL级别的权限控制</h3>
<h4 id=\\"业务场景假设\\">业务场景假设</h4>
<p>首先,我们假设有以下几种种URL</p>
<pre><code>/user/create        //用户创建,Admin专属
/post/create        //发帖 Admin,Normal共有
/login              //登陆
/logout             //注销
</code></pre>
<h4 id=\\"shiro基本配置\\">Shiro基本配置</h4>
<h5 id=\\"maven\\">Maven</h5>
<p><code>$&lt;shiro.version&gt;</code>请自行替换成当前的最新版本</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-core<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-spring<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-web<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-ehcache<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
</code></pre>
<h5 id=\\"webxml\\">web.xml</h5>
<p>为了实现与Spring同一个级别的URL拦截,需要将Shiro的Filter配置在Spring MVC的Dispatcher Servlet同一个级别</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-name</span>&gt;</span>shiroFilter<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-name</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-class</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">init-param</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">param-name</span>&gt;</span>targetFilterLifecycle<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">param-name</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">param-value</span>&gt;</span>true<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">param-value</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">init-param</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-mapping</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-name</span>&gt;</span>shiroFilter<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-name</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">url-pattern</span>&gt;</span>/*<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">url-pattern</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-mapping</span>&gt;</span>
</code></pre>
<h5 id=\\"spring-applicationcontextxml\\">Spring ApplicationContext.xml</h5>
<p>在与Spring进行整合的时候,为了方便拼切配置,在Spring 里面导入另一份专用于Shiro的xml配置</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">import</span> <span class=\\"hljs-attr\\">resource</span>=<span class=\\"hljs-string\\">\\"config/security/applicationContext-shiro-captcha.xml\\"</span>/&gt;</span>
</code></pre>
<h5 id=\\"spring-applicationcontext-shiro-captchaxml\\">Spring applicationContext-shiro-captcha.xml</h5>
<p>先将整个 shiro的xml配置贴出来,接下来在逐一解说其内容</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">beans</span> <span class=\\"hljs-attr\\">xmlns</span>=<span class=\\"hljs-string\\">\\"https://www.springframework.org/schema/beans\\"</span> <span class=\\"hljs-attr\\">xmlns:xsi</span>=<span class=\\"hljs-string\\">\\"https://www.w3.org/2001/XMLSchema-instance\\"</span>
       <span class=\\"hljs-attr\\">xsi:schemaLocation</span>=<span class=\\"hljs-string\\">\\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\\"</span>
       <span class=\\"hljs-attr\\">default-lazy-init</span>=<span class=\\"hljs-string\\">\\"true\\"</span>&gt;</span>

    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">description</span>&gt;</span>Shiro安全配置<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">description</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"realm\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 項目自定义的Realm --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.BookingShiroRealm\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"userService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"userService\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 用户授权信息Cache, 采用EhCache --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.cache.ehcache.EhCacheManager\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManagerConfigFile\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"classpath:config/security/ehcache-shiro.xml\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"lifecycleBeanPostProcessor\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.LifecycleBeanPostProcessor\\"</span>/&gt;</span>


    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"adminPermissionFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.AdminPermissionFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"normalPermissionFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.NormalPermissionFilter\\"</span>/&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- Shiro Filter --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"successUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/booking/search\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"unauthorizedUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
                <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
                <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
                <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
            <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filterChainDefinitions\\"</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">value</span>&gt;</span>
                /=authc
                /register = anon
                /forgot =anon
                /login = anon
                /login/action* = anon
                /logout = logout
                /js/** = anon
                /rest/**=anon
                /image/**=anon
                /jawr_loader.js=anon
                /user/create=roles[admin]
                /post/create/**=roles[normal|admin]
                /** =authc
            <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">value</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">beans</span>&gt;</span>
</code></pre>
<h4 id=\\"配置详解\\">配置详解</h4>
<p>首先要理解一件事情,就是Shiro的权限控制 源自于Web.xml的Filter,在Filter中获取目标URL的请求,解析以达到根据请求是否到达下一集Filter的作用.
再要理解一件约定大于配置的问题,了解Shiro的一些默认配置解说.</p>
<p>在贴出来的<code>shiro-captcha.xml</code>配置代码中:</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-comment\\">&lt;!-- Shiro Filter --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"successUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/booking/search\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"unauthorizedUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
            <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
            <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filterChainDefinitions\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">value</span>&gt;</span>
            /=authc
            /register = anon
            /forgot =anon
            /login = anon
            /login/action* = anon
            /logout = logout
            /js/** = anon
            /rest/**=anon
            /image/**=anon
            /jawr_loader.js=anon
            /user/create=roles[admin]
            /post/create/**=roles[normal|admin]
            /** =authc
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">value</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>
</code></pre>
<p>先来看<code>&lt;property name=&quot;filterChainDefinitions&quot;&gt;</code>中的属性.
&lt;values&gt;的内容,其实是url对应权限的一些mapping.表示对应的url mapping 需要对应的权限.
其中<code>authc</code>,<code>anon</code>,<code>logout</code>样例中提及的这三个,是Shiro自己的默认配置</p>
<blockquote>
<p><code>authc</code>表示,这这个mapping代表的url需要登陆之后才能查看
<code>anon</code>表示,这个mapping代表的url全部放行,所以可以看到所有js文件与image文件都被放行了
<code>logout</code> 表示这个mapping代表的url将进行一次注销操作,在浏览器客户端进行的是session的注销,在服务器端则是进行缓存的删除</p>
</blockquote>
<p>其中 <code>roles[admin],roles[normal|admin]</code> 则是自己定义的过滤规则.
表示<code>/user/create</code>只有角色包含<code>admin</code>的有权限访问
且<code>/post/create</code>则是角色是<code>admin</code>或<code>normal</code>的有权限访问</p>
<h5 id=\\"登录与注销\\">登录与注销</h5>
<h6 id=\\"登录\\">登录</h6>
<p>对于所有需要登录的URL可以通过 <code>authc</code>一个拦截器来拦截
在未登录的状态下,所有所有需要登录的URL都是自动跳转到上面XML所配置的<code>loginUrl</code>之中.
当然这里返回的是 一个对 <code>/login</code>路径的get请求</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
</code></pre>
<h6 id=\\"注销\\">注销</h6>
<p>注销也很简单,只要任意url能够跳转到<code>/logout</code>,便会自动注销.</p>
<h5 id=\\"同步登录与异步登陆\\">同步登录与异步登陆</h5>
<p>其实在Shiro的配置中,通过阅读源码可以看出,其实<code>loginUrl</code>一个属性,代表的是
当Method=Get的请求到达其值对应的url(/login)时,返回登录的页面.
当Method=Post的请求到达其值对应的url(/login)时,进入到的就是Shiro本身的登陆操作
该操作,通过读取<code>securityManager</code>的配置,</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
</code></pre>
<p>通过自定义的realm <code>BookingShiroRealm</code></p>
<blockquote>
<p>此处<code>BookingShiroRealm</code>是自己定义的名称,只是为了符合但是的业务需要起的名字</p>
</blockquote>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-comment\\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"realm\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

<span class=\\"hljs-comment\\">&lt;!-- 項目自定义的Realm --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.BookingShiroRealm\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"userService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"userService\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>
</code></pre>
<p>接下来解说一下
<code>BookingShiroRealm.java</code>
的内容</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">BookingShiroRealm</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">AuthorizingRealm</span> </span>{
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String LOGIN_SESSION_NAME=<span class=\\"hljs-string\\">\\"loginSession\\"</span>;
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String SIMPLE_AUTHORIZATION_INFO=<span class=\\"hljs-string\\">\\"simpleAuthorizationInfo\\"</span>;

    <span class=\\"hljs-keyword\\">private</span> LoginSessionService loginSessionService;

    <span class=\\"hljs-keyword\\">private</span> UserService userService;


    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> LoginSessionService <span class=\\"hljs-title\\">getLoginSessionService</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> loginSessionService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setLoginSessionService</span><span class=\\"hljs-params\\">(LoginSessionService loginSessionService)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.loginSessionService = loginSessionService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> UserService <span class=\\"hljs-title\\">getUserService</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> userService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setUserService</span><span class=\\"hljs-params\\">(UserService userService)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.userService = userService;
    }

    <span class=\\"hljs-comment\\">/*授权信息*/</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthorizationInfo <span class=\\"hljs-title\\">doGetAuthorizationInfo</span><span class=\\"hljs-params\\">(PrincipalCollection principals)</span> </span>{
        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
        <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\\"hljs-keyword\\">null</span>){
            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
        }
        <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\\"hljs-keyword\\">null</span>){

            UserDto userDto=userService.findUserById(loginSession.getUserId());
            <span class=\\"hljs-keyword\\">if</span> (userDto != <span class=\\"hljs-keyword\\">null</span>) {
                SimpleAuthorizationInfo info = <span class=\\"hljs-keyword\\">new</span> SimpleAuthorizationInfo();
                Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
                <span class=\\"hljs-keyword\\">for</span>(RoleDto roleDto:roleDtoSet){
                    info.addRole(roleDto.getName().toLowerCase());
                }

                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
            } <span class=\\"hljs-keyword\\">else</span> {
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
            }
        }
        <span class=\\"hljs-keyword\\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
    }

    <span class=\\"hljs-comment\\">/*认证信息*/</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthenticationInfo <span class=\\"hljs-title\\">doGetAuthenticationInfo</span><span class=\\"hljs-params\\">(AuthenticationToken authenticationToken)</span> <span class=\\"hljs-keyword\\">throws</span> AuthenticationException </span>{
        System.out.println(<span class=\\"hljs-string\\">\\"Come to BookingShiroRealm\\"</span>);
        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;
        String userId=token.getUsername();
        String cryptedPassword= String.valueOf(token.getPassword());
        <span class=\\"hljs-keyword\\">if</span>(StringUtils.isNotEmpty(userId)){
            UserDto targetUser=userService.getByUserId(userId);
            System.out.println(<span class=\\"hljs-string\\">\\"TargetUser:\\"</span>+userId+<span class=\\"hljs-string\\">\\" InputPassWord:\\"</span>+cryptedPassword+<span class=\\"hljs-string\\">\\" DB PassWord:\\"</span>+targetUser.getCryptedPassword());
            <span class=\\"hljs-keyword\\">if</span>(cryptedPassword.equals(targetUser.getCryptedPassword())){
                System.out.println(<span class=\\"hljs-string\\">\\"BookingShiroRealm:Login Success\\"</span>);
                LoginSession loginSession=<span class=\\"hljs-keyword\\">new</span> LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());
                loginSessionService.clearSessionByUserId(userId);
                loginSessionService.save(loginSession);
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());
            }
        }
        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
    }
}

</code></pre>
<p><code>AuthorizingRealm</code>是Shiro负责身份认证的抽象类.
需要实现其<code>doGetAuthenticationInfo</code>方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程.
和实现其<code>doGetAuthorizationInfo</code>方法,实现对需要登陆之后 对权限的认证.</p>
<p>在说到登陆的校验之前,可以看到在<code>doGetAuthenticationInfo</code>方法里面 有一个authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢.
此时返回来回到Spring配置Shiro的xml <code>applicationContext-shiro-captcha.xml</code>
会发现</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"roles[admin]\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"roles[normal]\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
</code></pre>
<p>里面会有一个<code>captchaFilter</code>,
指向其注入的类 <code>CaptchaFormAuthenticationFilter.java</code></p>
<p>附上<code>CaptchaFormAuthenticationFilter</code>代码</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">CaptchaFormAuthenticationFilter</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">FormAuthenticationFilter</span> </span>{

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String DEFAULT_CAPTCHA_PARAM = <span class=\\"hljs-string\\">\\"captcha\\"</span>;

    <span class=\\"hljs-keyword\\">private</span> String captchaParam = DEFAULT_CAPTCHA_PARAM;

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getCaptchaParam</span><span class=\\"hljs-params\\">()</span> </span>{

        <span class=\\"hljs-keyword\\">return</span> captchaParam;

    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> String <span class=\\"hljs-title\\">getCaptcha</span><span class=\\"hljs-params\\">(ServletRequest request)</span> </span>{

        <span class=\\"hljs-keyword\\">return</span> WebUtils.getCleanParam(request, getCaptchaParam());

    }

    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">boolean</span> <span class=\\"hljs-title\\">onLoginFailure</span><span class=\\"hljs-params\\">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> </span>{
        setFailureAttribute(request, e);
        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">true</span>;
    }

    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setFailureAttribute</span><span class=\\"hljs-params\\">(ServletRequest request, AuthenticationException ae)</span> </span>{
        String className = ae.getClass().getName();
        request.setAttribute(getFailureKeyAttribute(), className);
    }

    <span class=\\"hljs-comment\\">//这里进行密码的加密</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> CaptchaUsernamePasswordToken <span class=\\"hljs-title\\">createToken</span><span class=\\"hljs-params\\">(ServletRequest request, ServletResponse response)</span> </span>{
        System.out.println(<span class=\\"hljs-string\\">\\"Come to CreateToken\\"</span>);
        String username = getUsername(request);
        String password = getPassword(request);
        String captcha = getCaptcha(request);
        <span class=\\"hljs-keyword\\">boolean</span> rememberMe = isRememberMe(request);
        String host = getHost(request);

        System.out.println(<span class=\\"hljs-string\\">\\"Captcha UserName(UserId):\\"</span> + username);
        System.out.println(<span class=\\"hljs-string\\">\\"Captcha Password:\\"</span> + password);
        System.out.println(<span class=\\"hljs-string\\">\\"Captcha RememberMe:\\"</span> + rememberMe);


        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> CaptchaUsernamePasswordToken(username,
                password.toCharArray(), rememberMe, host, captcha);

    }


    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">boolean</span> <span class=\\"hljs-title\\">executeLogin</span><span class=\\"hljs-params\\">(ServletRequest request, ServletResponse response)</span> <span class=\\"hljs-keyword\\">throws</span> Exception </span>{
        CaptchaUsernamePasswordToken token = createToken(request, response);

        <span class=\\"hljs-keyword\\">try</span> {
            System.out.println(<span class=\\"hljs-string\\">\\"Execute Login~\\"</span>);
            Subject subject = getSubject(request, response);
            subject.login(token);

            <span class=\\"hljs-keyword\\">return</span> onLoginSuccess(token,subject, request, response);
        } <span class=\\"hljs-keyword\\">catch</span> (AuthenticationException e) {
            <span class=\\"hljs-keyword\\">return</span> onLoginFailure(token,e, request, response);
        }
    }
}
</code></pre>
<p>继承<code>FormAuthenticationFilter</code>的<code>CaptchaFormAuthenticationFilter</code>并重写其<code>CaptchaUsernamePasswordToken</code>方法.
用于通过<code>/login</code>的POST方式提交过来的时候,便会先经过此filter的<code>createToken</code>方法进行token的生成</p>
<p>假设有一个登陆页面的<code>/login</code>使用同步提交方式,即通过页面的form表单,<code>action=&quot;/login&quot;</code>,<code>method=&quot;POST&quot;</code>提交到后台,触发流程是</p>
<blockquote>
<ol>
<li>到达 <code>FormAuthenticationFilter</code> 根据表单 生成Token.</li>
<li>调用 Shiro专门处理认证的 <code>subject</code>其<code>login</code>方法进行登陆</li>
<li><code>login</code>方法 通过调用 自定义的<code>BookingShiroRealm</code>方法所实现的顶级接口 来实现对数据库的信息的读取</li>
<li>判定登陆用户名与密码 匹配之后,可以通过Shiro自己配置的缓存保存认证信息.</li>
</ol>
</blockquote>
<p>但是在这个时代,还通过同步登陆 实在是太TM捞了,其实异步登陆提交,只需要 手动调用subject.login方法即可
将第一步到达<code>FormAuthenticationFilter</code>的token手动生成</p>
<p>异步登陆的实现代码 大概如下(以Controller为例)</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-meta\\">@RequestMapping</span>(value = <span class=\\"hljs-string\\">\\"/action\\"</span>, method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
<span class=\\"hljs-meta\\">@ResponseBody</span>
<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> LoginMessage <span class=\\"hljs-title\\">loginAction</span><span class=\\"hljs-params\\">(
        @RequestParam(value = <span class=\\"hljs-string\\">\\"username\\"</span>)</span> String username,
        @<span class=\\"hljs-title\\">RequestParam</span><span class=\\"hljs-params\\">(value = <span class=\\"hljs-string\\">\\"password\\"</span>)</span> String password,
        @<span class=\\"hljs-title\\">RequestParam</span><span class=\\"hljs-params\\">(value = <span class=\\"hljs-string\\">\\"rememberMe\\"</span>, required = <span class=\\"hljs-keyword\\">false</span>, defaultValue = <span class=\\"hljs-string\\">\\"false\\"</span>)</span> <span class=\\"hljs-keyword\\">boolean</span> rememberMe,
        ServletRequest request) </span>{
    LoginMessage loginMessage = <span class=\\"hljs-keyword\\">new</span> LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());
    Subject subject = SecurityUtils.getSubject();


    <span class=\\"hljs-comment\\">//尝试获取 跳转到Login前的那个页面的url</span>
    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">null</span> != WebUtils.getSavedRequest(request)) {
        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();
        loginMessage.setRedirect(requestURI);
    }

    <span class=\\"hljs-keyword\\">try</span> {
        String salt=userService.getByUserId(username).getSalt();
        UsernamePasswordToken token = <span class=\\"hljs-keyword\\">new</span> UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));
        subject.login(token);
        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());

        <span class=\\"hljs-comment\\">//尝试判断 用户是不是第一次登陆</span>
        UserDto currentUser=userService.getByUserId(username);
        <span class=\\"hljs-keyword\\">if</span> (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){
            String redirectPath=request.getServletContext().getContextPath()+<span class=\\"hljs-string\\">\\"/user/password/reset\\"</span>;
            loginMessage.setRedirect(redirectPath);
        }


    } <span class=\\"hljs-keyword\\">catch</span> (UnknownAccountException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());
    } <span class=\\"hljs-keyword\\">catch</span> (IncorrectCredentialsException |NullPointerException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());
    } <span class=\\"hljs-keyword\\">catch</span> (AuthenticationException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());
    }
    <span class=\\"hljs-keyword\\">return</span> loginMessage;
}

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">LoginMessage</span> </span>{
    <span class=\\"hljs-keyword\\">private</span> String status;
    <span class=\\"hljs-keyword\\">private</span> String message;
    <span class=\\"hljs-keyword\\">private</span> String redirect;

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-title\\">LoginMessage</span><span class=\\"hljs-params\\">(String status)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.status = status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getStatus</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setStatus</span><span class=\\"hljs-params\\">(String status)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.status = status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getMessage</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> message;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setMessage</span><span class=\\"hljs-params\\">(String message)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.message = message;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getRedirect</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> redirect;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setRedirect</span><span class=\\"hljs-params\\">(String redirect)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.redirect = redirect;
    }
}
</code></pre>
<h5 id=\\"角色校验\\">角色校验</h5>
<p>登陆的时候,其实只是实现了 <code>登陆认证</code>,<code>缓存登录信息</code>的过程.
并没有实现,<code>权限赋予</code>的过程.只有第一次遇到 需要登陆且特定权限的url的时候,才会请求后台是否有进入对应url的权限.</p>
<p>在讲权限之前,概括一下数据库的设计</p>
<pre><code class=\\"hljs SQL\\"><span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> <span class=\\"hljs-keyword\\">USERS</span>
(
    <span class=\\"hljs-keyword\\">ID</span> <span class=\\"hljs-built_in\\">BIGINT</span> PRIMARY <span class=\\"hljs-keyword\\">KEY</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span> AUTO_INCREMENT,
    ACTIVE <span class=\\"hljs-built_in\\">BIT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    ADDRESS <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">300</span>),
    CITY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    COMPANY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    COUNTRY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    CRYPTED_PASSWORD <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>),
    DEPARTMENT <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    DISPLAY_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">128</span>),
    EMAIL <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">60</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    FAX <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    FIRST_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    GENDER <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">6</span>),
    JOBTITLE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    LAST_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    LOCATION <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    MIDDLE_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    OFFICE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    OFFICECODE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">22</span>),
    PHONE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">128</span>),
    <span class=\\"hljs-keyword\\">SALT</span> <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    STAFFID <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    STAFFROLE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">15</span>),
    TERRITORY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    USERID <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>
);


<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> <span class=\\"hljs-keyword\\">ROLES</span>
(
    <span class=\\"hljs-keyword\\">ID</span> <span class=\\"hljs-built_in\\">BIGINT</span> PRIMARY <span class=\\"hljs-keyword\\">KEY</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span> AUTO_INCREMENT,
    DESCRIPTION <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>),
    <span class=\\"hljs-keyword\\">NAME</span> <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>
);
<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">UNIQUE</span> <span class=\\"hljs-keyword\\">INDEX</span> UK_OFX66KERUAPI6VYQPV6F2OR37 <span class=\\"hljs-keyword\\">ON</span> <span class=\\"hljs-keyword\\">ROLES</span> (<span class=\\"hljs-keyword\\">NAME</span>);

<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> ROLE_USER
(
    ROLE_ID <span class=\\"hljs-built_in\\">BIGINT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    USER_ID <span class=\\"hljs-built_in\\">BIGINT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    PRIMARY <span class=\\"hljs-keyword\\">KEY</span> (ROLE_ID, USER_ID),
    <span class=\\"hljs-keyword\\">FOREIGN</span> <span class=\\"hljs-keyword\\">KEY</span> (ROLE_ID) <span class=\\"hljs-keyword\\">REFERENCES</span> <span class=\\"hljs-keyword\\">ROLES</span> (<span class=\\"hljs-keyword\\">ID</span>),
    <span class=\\"hljs-keyword\\">FOREIGN</span> <span class=\\"hljs-keyword\\">KEY</span> (USER_ID) <span class=\\"hljs-keyword\\">REFERENCES</span> <span class=\\"hljs-keyword\\">USERS</span> (<span class=\\"hljs-keyword\\">ID</span>)
);

<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">INDEX</span> FK_NJAJEL6A2Q8TR36EMB9L8VW7N <span class=\\"hljs-keyword\\">ON</span> ROLE_USER (USER_ID);

</code></pre>
<p>数据库有三个表 <code>USERS</code>,<code>ROLES</code>,<code>USER_ROLE</code>
其实在设计上<code>User</code>表跟<code>ROLE</code>表是多对多的关系,即User里面有一个Set&lt;Role&gt;,Role里面也有一个Set&lt;User&gt;
通过中间表<code>USER_ROLE</code>来实现多对多关联.</p>
<p>下面来看 身份认证的具体实现
<code>BookingShiroRealm.java</code></p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthorizationInfo <span class=\\"hljs-title\\">doGetAuthorizationInfo</span><span class=\\"hljs-params\\">(PrincipalCollection principals)</span> </span>{
    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
    <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\\"hljs-keyword\\">null</span>){
        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
    }
    <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\\"hljs-keyword\\">null</span>){

        UserDto userDto=userService.findUserById(loginSession.getUserId());
        <span class=\\"hljs-keyword\\">if</span> (userDto != <span class=\\"hljs-keyword\\">null</span>) {
            SimpleAuthorizationInfo info = <span class=\\"hljs-keyword\\">new</span> SimpleAuthorizationInfo();
            Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
            <span class=\\"hljs-keyword\\">for</span>(RoleDto roleDto:roleDtoSet){
                info.addRole(roleDto.getName().toLowerCase());
            }

            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
        } <span class=\\"hljs-keyword\\">else</span> {
            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
        }
    }
    <span class=\\"hljs-keyword\\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
}
</code></pre>
<p>通过</p>
<pre><code class=\\"hljs Java\\">Subject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)
</code></pre>
<p>来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在Session里面.
当需要对应的权限,且发现已经有<code>SIMPLE_AUTHORIZATION_INFO</code>这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.</p>
<p>当然 对应权限的获取,也是通过shiro 配置里面的captchaFilter的具体实现类,实现其<code>isAccessAllowed</code>方法来判定.</p>
<h2 id=\\"summary\\">Summary</h2>
<p>本次主要分享了Share 如何在Spring中整合Apache Shiro的过程.
但是整体配置依然是通过XML统一配置,其实Shiro在近期的版本已经有了Annotation级别的方法能够方便的对URL的Mapping进行注解.
具体的应用过程,就像Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.</p>
",
          "images": Array [],
          "md": "# Spring 整合 Apache Shiro 实现各等级的权限管理

\`\`\`metadata
title: Spring 整合 Apache Shiro 实现各等级的权限管理
created: 2015-10-25
updated: 2015-10-25
category: Blog
tags:
- Spring
- Security
- Shiro
- Java
\`\`\`


## Background

前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.

> Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication,
> authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you
> can quickly and easily secure any application – from the smallest mobile applications to the
> largest web and enterprise applications.


在参考过 IBM 开发社区关于Shiro的博客 一篇文章 [在Web项目中应用Apache Shiro](https://www.ibm.com/developerworks/cn/java/j-lo-shiro/)
与开涛博客的一个跟我学Shiro系列文章 [开涛博客-跟我学Shiro](https://jinnianshilongnian.iteye.com/blog/2024723)

> 不得不说的是IBM Developer社区的文章一向属于生动易懂.
> 但是上面的这篇讲得并没有之前推荐的讲Spring-DataJPA的那篇文章那样浅显,
> 于是才有了现在这份笔记


## 权限控制

我所接触到的权限控制大概可以分成两个级别 URL和方法级别.


以常见的论坛用户来举例.论坛用户简要的分成两种 管理员\`Admin\`,普通用户\`Normal\`.
其中管理员能够进入用户管理,帖子管理的页面进行CRUD操作.
普通用户则只能进行自己帖子的CRU操作,以及顶贴什么的.

如果只进行URL级别的拦截,只需要在每一个URL的访问时 获取用户的角色是\`Admin\`还是\`Normal\`即可.

如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等).
但是由于跟数据库的设计密切相关,所以这个级别不细讲.
言归正传(不知道是不是看light大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解

### URL级别的权限控制

#### 业务场景假设

首先,我们假设有以下几种种URL
\`\`\`
/user/create        //用户创建,Admin专属
/post/create        //发帖 Admin,Normal共有
/login              //登陆
/logout             //注销
\`\`\`

#### Shiro基本配置

##### Maven
\`$<shiro.version>\`请自行替换成当前的最新版本
\`\`\`xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-core</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-web</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-ehcache</artifactId>
    <version>\${shiro.version}</version>
</dependency>
\`\`\`

##### web.xml
为了实现与Spring同一个级别的URL拦截,需要将Shiro的Filter配置在Spring MVC的Dispatcher Servlet同一个级别
\`\`\`xml
<filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
        <param-name>targetFilterLifecycle</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
\`\`\`

##### Spring ApplicationContext.xml
在与Spring进行整合的时候,为了方便拼切配置,在Spring 里面导入另一份专用于Shiro的xml配置
\`\`\`xml
<import resource=\\"config/security/applicationContext-shiro-captcha.xml\\"/>
\`\`\`

##### Spring applicationContext-shiro-captcha.xml
先将整个 shiro的xml配置贴出来,接下来在逐一解说其内容
\`\`\`xml
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<beans xmlns=\\"https://www.springframework.org/schema/beans\\" xmlns:xsi=\\"https://www.w3.org/2001/XMLSchema-instance\\"
       xsi:schemaLocation=\\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\\"
       default-lazy-init=\\"true\\">

    <description>Shiro安全配置</description>

    <!-- Shiro's main business-tier object for web-enabled applications -->
    <bean id=\\"securityManager\\" class=\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\">
        <property name=\\"realm\\" ref=\\"shiroRealm\\"/>
        <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id=\\"shiroRealm\\" class=\\"com.quariuslt.service.security.BookingShiroRealm\\">
        <property name=\\"loginSessionService\\" ref=\\"loginSessionService\\"/>
        <property name=\\"userService\\" ref=\\"userService\\"/>
        <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
    </bean>

    <!-- 用户授权信息Cache, 采用EhCache -->
    <bean id=\\"shiroEhcacheManager\\" class=\\"org.apache.shiro.cache.ehcache.EhCacheManager\\">
        <property name=\\"cacheManagerConfigFile\\" value=\\"classpath:config/security/ehcache-shiro.xml\\"/>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id=\\"lifecycleBeanPostProcessor\\" class=\\"org.apache.shiro.spring.LifecycleBeanPostProcessor\\"/>


    <bean class=\\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\\">
        <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
    </bean>

    <bean id=\\"captchaFilter\\" class=\\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\\"/>
    <bean id=\\"adminPermissionFilter\\" class=\\"com.quariuslt.service.security.AdminPermissionFilter\\"/>
    <bean id=\\"normalPermissionFilter\\" class=\\"com.quariuslt.service.security.NormalPermissionFilter\\"/>

    <!-- Shiro Filter -->
    <bean id=\\"shiroFilter\\" class=\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\">
        <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
        <property name=\\"loginUrl\\" value=\\"/login\\"/>
        <property name=\\"successUrl\\" value=\\"/booking/search\\"/>
        <property name=\\"unauthorizedUrl\\" value=\\"/\\"/>
        <property name=\\"filters\\">
            <map>
                <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
                <!--<entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>-->
                <!--<entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>-->
            </map>
        </property>
        <property name=\\"filterChainDefinitions\\">
            <value>
                /=authc
                /register = anon
                /forgot =anon
                /login = anon
                /login/action* = anon
                /logout = logout
                /js/** = anon
                /rest/**=anon
                /image/**=anon
                /jawr_loader.js=anon
                /user/create=roles[admin]
                /post/create/**=roles[normal|admin]
                /** =authc
            </value>
        </property>
    </bean>

</beans>
\`\`\`

#### 配置详解
首先要理解一件事情,就是Shiro的权限控制 源自于Web.xml的Filter,在Filter中获取目标URL的请求,解析以达到根据请求是否到达下一集Filter的作用.
再要理解一件约定大于配置的问题,了解Shiro的一些默认配置解说.

在贴出来的\`shiro-captcha.xml\`配置代码中:
\`\`\`xml
<!-- Shiro Filter -->
<bean id=\\"shiroFilter\\" class=\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\">
    <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
    <property name=\\"loginUrl\\" value=\\"/login\\"/>
    <property name=\\"successUrl\\" value=\\"/booking/search\\"/>
    <property name=\\"unauthorizedUrl\\" value=\\"/\\"/>
    <property name=\\"filters\\">
        <map>
            <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
            <!--<entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>-->
            <!--<entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>-->
        </map>
    </property>
    <property name=\\"filterChainDefinitions\\">
        <value>
            /=authc
            /register = anon
            /forgot =anon
            /login = anon
            /login/action* = anon
            /logout = logout
            /js/** = anon
            /rest/**=anon
            /image/**=anon
            /jawr_loader.js=anon
            /user/create=roles[admin]
            /post/create/**=roles[normal|admin]
            /** =authc
        </value>
    </property>
</bean>
\`\`\`
先来看\`<property name=\\"filterChainDefinitions\\">\`中的属性.
<values>的内容,其实是url对应权限的一些mapping.表示对应的url mapping 需要对应的权限.
其中\`authc\`,\`anon\`,\`logout\`样例中提及的这三个,是Shiro自己的默认配置
> \`authc\`表示,这这个mapping代表的url需要登陆之后才能查看
> \`anon\`表示,这个mapping代表的url全部放行,所以可以看到所有js文件与image文件都被放行了
> \`logout\` 表示这个mapping代表的url将进行一次注销操作,在浏览器客户端进行的是session的注销,在服务器端则是进行缓存的删除

其中 \`roles[admin],roles[normal|admin]\` 则是自己定义的过滤规则.
表示\`/user/create\`只有角色包含\`admin\`的有权限访问
且\`/post/create\`则是角色是\`admin\`或\`normal\`的有权限访问


##### 登录与注销

###### 登录
对于所有需要登录的URL可以通过 \`authc\`一个拦截器来拦截
在未登录的状态下,所有所有需要登录的URL都是自动跳转到上面XML所配置的\`loginUrl\`之中.
当然这里返回的是 一个对 \`/login\`路径的get请求
\`\`\`xml
<property name=\\"loginUrl\\" value=\\"/login\\"/>
\`\`\`
###### 注销
注销也很简单,只要任意url能够跳转到\`/logout\`,便会自动注销.


##### 同步登录与异步登陆
其实在Shiro的配置中,通过阅读源码可以看出,其实\`loginUrl\`一个属性,代表的是
当Method=Get的请求到达其值对应的url(/login)时,返回登录的页面.
当Method=Post的请求到达其值对应的url(/login)时,进入到的就是Shiro本身的登陆操作
该操作,通过读取\`securityManager\`的配置,
\`\`\`xml
<property name=\\"securityManager\\" ref=\\"securityManager\\"/>
\`\`\`

通过自定义的realm \`BookingShiroRealm\`
> 此处\`BookingShiroRealm\`是自己定义的名称,只是为了符合但是的业务需要起的名字

\`\`\`xml
<!-- Shiro's main business-tier object for web-enabled applications -->
<bean id=\\"securityManager\\" class=\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\">
    <property name=\\"realm\\" ref=\\"shiroRealm\\"/>
    <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
</bean>

<!-- 項目自定义的Realm -->
<bean id=\\"shiroRealm\\" class=\\"com.quariuslt.service.security.BookingShiroRealm\\">
    <property name=\\"loginSessionService\\" ref=\\"loginSessionService\\"/>
    <property name=\\"userService\\" ref=\\"userService\\"/>
    <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
</bean>
\`\`\`

接下来解说一下
\`BookingShiroRealm.java\`
的内容

\`\`\`Java
public class BookingShiroRealm extends AuthorizingRealm {
    public static final String LOGIN_SESSION_NAME=\\"loginSession\\";
    public static final String SIMPLE_AUTHORIZATION_INFO=\\"simpleAuthorizationInfo\\";

    private LoginSessionService loginSessionService;

    private UserService userService;


    public LoginSessionService getLoginSessionService() {
        return loginSessionService;
    }

    public void setLoginSessionService(LoginSessionService loginSessionService) {
        this.loginSessionService = loginSessionService;
    }

    public UserService getUserService() {
        return userService;
    }

    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /*授权信息*/
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
        if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){
            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
        }
        if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){

            UserDto userDto=userService.findUserById(loginSession.getUserId());
            if (userDto != null) {
                SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
                Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
                for(RoleDto roleDto:roleDtoSet){
                    info.addRole(roleDto.getName().toLowerCase());
                }

                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
            } else {
                return null;
            }
        }
        return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
    }

    /*认证信息*/
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        System.out.println(\\"Come to BookingShiroRealm\\");
        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;
        String userId=token.getUsername();
        String cryptedPassword= String.valueOf(token.getPassword());
        if(StringUtils.isNotEmpty(userId)){
            UserDto targetUser=userService.getByUserId(userId);
            System.out.println(\\"TargetUser:\\"+userId+\\" InputPassWord:\\"+cryptedPassword+\\" DB PassWord:\\"+targetUser.getCryptedPassword());
            if(cryptedPassword.equals(targetUser.getCryptedPassword())){
                System.out.println(\\"BookingShiroRealm:Login Success\\");
                LoginSession loginSession=new LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());
                loginSessionService.clearSessionByUserId(userId);
                loginSessionService.save(loginSession);
                return new SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());
            }
        }
        return null;
    }
}

\`\`\`
\`AuthorizingRealm\`是Shiro负责身份认证的抽象类.
需要实现其\`doGetAuthenticationInfo\`方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程.
和实现其\`doGetAuthorizationInfo\`方法,实现对需要登陆之后 对权限的认证.


在说到登陆的校验之前,可以看到在\`doGetAuthenticationInfo\`方法里面 有一个authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢.
此时返回来回到Spring配置Shiro的xml \`applicationContext-shiro-captcha.xml\`
会发现
\`\`\`xml
<property name=\\"filters\\">
    <map>
        <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
        <entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>
        <entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>
    </map>
</property>
\`\`\`
里面会有一个\`captchaFilter\`,
指向其注入的类 \`CaptchaFormAuthenticationFilter.java\`

附上\`CaptchaFormAuthenticationFilter\`代码
\`\`\`Java
public class CaptchaFormAuthenticationFilter extends FormAuthenticationFilter {

    public static final String DEFAULT_CAPTCHA_PARAM = \\"captcha\\";

    private String captchaParam = DEFAULT_CAPTCHA_PARAM;

    public String getCaptchaParam() {

        return captchaParam;

    }

    protected String getCaptcha(ServletRequest request) {

        return WebUtils.getCleanParam(request, getCaptchaParam());

    }

    @Override
    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) {
        setFailureAttribute(request, e);
        return true;
    }

    @Override
    protected void setFailureAttribute(ServletRequest request, AuthenticationException ae) {
        String className = ae.getClass().getName();
        request.setAttribute(getFailureKeyAttribute(), className);
    }

    //这里进行密码的加密
    @Override
    protected CaptchaUsernamePasswordToken createToken(ServletRequest request, ServletResponse response) {
        System.out.println(\\"Come to CreateToken\\");
        String username = getUsername(request);
        String password = getPassword(request);
        String captcha = getCaptcha(request);
        boolean rememberMe = isRememberMe(request);
        String host = getHost(request);

        System.out.println(\\"Captcha UserName(UserId):\\" + username);
        System.out.println(\\"Captcha Password:\\" + password);
        System.out.println(\\"Captcha RememberMe:\\" + rememberMe);


        return new CaptchaUsernamePasswordToken(username,
                password.toCharArray(), rememberMe, host, captcha);

    }


    @Override
    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception {
        CaptchaUsernamePasswordToken token = createToken(request, response);

        try {
            System.out.println(\\"Execute Login~\\");
            Subject subject = getSubject(request, response);
            subject.login(token);

            return onLoginSuccess(token,subject, request, response);
        } catch (AuthenticationException e) {
            return onLoginFailure(token,e, request, response);
        }
    }
}
\`\`\`
继承\`FormAuthenticationFilter\`的\`CaptchaFormAuthenticationFilter\`并重写其\`CaptchaUsernamePasswordToken\`方法.
用于通过\`/login\`的POST方式提交过来的时候,便会先经过此filter的\`createToken\`方法进行token的生成


假设有一个登陆页面的\`/login\`使用同步提交方式,即通过页面的form表单,\`action=\\"/login\\"\`,\`method=\\"POST\\"\`提交到后台,触发流程是
> 1. 到达 \`FormAuthenticationFilter\` 根据表单 生成Token.
> 2. 调用 Shiro专门处理认证的 \`subject\`其\`login\`方法进行登陆
> 3. \`login\`方法 通过调用 自定义的\`BookingShiroRealm\`方法所实现的顶级接口 来实现对数据库的信息的读取
> 4. 判定登陆用户名与密码 匹配之后,可以通过Shiro自己配置的缓存保存认证信息.

但是在这个时代,还通过同步登陆 实在是太TM捞了,其实异步登陆提交,只需要 手动调用subject.login方法即可
将第一步到达\`FormAuthenticationFilter\`的token手动生成

异步登陆的实现代码 大概如下(以Controller为例)
\`\`\`Java
@RequestMapping(value = \\"/action\\", method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
@ResponseBody
public LoginMessage loginAction(
        @RequestParam(value = \\"username\\") String username,
        @RequestParam(value = \\"password\\") String password,
        @RequestParam(value = \\"rememberMe\\", required = false, defaultValue = \\"false\\") boolean rememberMe,
        ServletRequest request) {
    LoginMessage loginMessage = new LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());
    Subject subject = SecurityUtils.getSubject();


    //尝试获取 跳转到Login前的那个页面的url
    if(null != WebUtils.getSavedRequest(request)) {
        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();
        loginMessage.setRedirect(requestURI);
    }

    try {
        String salt=userService.getByUserId(username).getSalt();
        UsernamePasswordToken token = new UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));
        subject.login(token);
        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());

        //尝试判断 用户是不是第一次登陆
        UserDto currentUser=userService.getByUserId(username);
        if (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){
            String redirectPath=request.getServletContext().getContextPath()+\\"/user/password/reset\\";
            loginMessage.setRedirect(redirectPath);
        }


    } catch (UnknownAccountException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());
    } catch (IncorrectCredentialsException |NullPointerException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());
    } catch (AuthenticationException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());
    }
    return loginMessage;
}

class LoginMessage {
    private String status;
    private String message;
    private String redirect;

    public LoginMessage(String status) {
        this.status = status;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getRedirect() {
        return redirect;
    }

    public void setRedirect(String redirect) {
        this.redirect = redirect;
    }
}
\`\`\`


##### 角色校验
登陆的时候,其实只是实现了 \`登陆认证\`,\`缓存登录信息\`的过程.
并没有实现,\`权限赋予\`的过程.只有第一次遇到 需要登陆且特定权限的url的时候,才会请求后台是否有进入对应url的权限.

在讲权限之前,概括一下数据库的设计
\`\`\`SQL
CREATE TABLE USERS
(
    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    ACTIVE BIT NOT NULL,
    ADDRESS VARCHAR(300),
    CITY VARCHAR(50),
    COMPANY VARCHAR(20),
    COUNTRY VARCHAR(50),
    CRYPTED_PASSWORD VARCHAR(255),
    DEPARTMENT VARCHAR(20),
    DISPLAY_NAME VARCHAR(128),
    EMAIL VARCHAR(60) NOT NULL,
    FAX VARCHAR(100),
    FIRST_NAME VARCHAR(40),
    GENDER VARCHAR(6),
    JOBTITLE VARCHAR(100),
    LAST_NAME VARCHAR(40),
    LOCATION VARCHAR(50),
    MIDDLE_NAME VARCHAR(40),
    OFFICE VARCHAR(20),
    OFFICECODE VARCHAR(22),
    PHONE VARCHAR(128),
    SALT VARCHAR(255) NOT NULL,
    STAFFID VARCHAR(20),
    STAFFROLE VARCHAR(15),
    TERRITORY VARCHAR(100),
    USERID VARCHAR(20) NOT NULL
);


CREATE TABLE ROLES
(
    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    DESCRIPTION VARCHAR(255),
    NAME VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX UK_OFX66KERUAPI6VYQPV6F2OR37 ON ROLES (NAME);

CREATE TABLE ROLE_USER
(
    ROLE_ID BIGINT NOT NULL,
    USER_ID BIGINT NOT NULL,
    PRIMARY KEY (ROLE_ID, USER_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID)
);

CREATE INDEX FK_NJAJEL6A2Q8TR36EMB9L8VW7N ON ROLE_USER (USER_ID);

\`\`\`
数据库有三个表 \`USERS\`,\`ROLES\`,\`USER_ROLE\`
其实在设计上\`User\`表跟\`ROLE\`表是多对多的关系,即User里面有一个Set<Role>,Role里面也有一个Set<User>
通过中间表\`USER_ROLE\`来实现多对多关联.

下面来看 身份认证的具体实现
\`BookingShiroRealm.java\`
\`\`\`Java
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
    if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){
        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
    }
    if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){

        UserDto userDto=userService.findUserById(loginSession.getUserId());
        if (userDto != null) {
            SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
            Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
            for(RoleDto roleDto:roleDtoSet){
                info.addRole(roleDto.getName().toLowerCase());
            }

            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
        } else {
            return null;
        }
    }
    return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
}
\`\`\`
通过
\`\`\`Java
Subject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)
\`\`\`
来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在Session里面.
当需要对应的权限,且发现已经有\`SIMPLE_AUTHORIZATION_INFO\`这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.

当然 对应权限的获取,也是通过shiro 配置里面的captchaFilter的具体实现类,实现其\`isAccessAllowed\`方法来判定.











## Summary
本次主要分享了Share 如何在Spring中整合Apache Shiro的过程.
但是整体配置依然是通过XML统一配置,其实Shiro在近期的版本已经有了Annotation级别的方法能够方便的对URL的Mapping进行注解.
具体的应用过程,就像Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.
",
          "metadata": Object {
            "category": "Blog",
            "cover": "https://picsum.photos/id/126/800/300",
            "created": "2015-10-25",
            "tags": Array [
              "Spring",
              "Security",
              "Shiro",
              "Java",
            ],
            "title": "Spring 整合 Apache Shiro 实现各等级的权限管理",
            "updated": "2015-10-25",
          },
          "permalink": "/2015/10/25/apache-shiro-spring-integration",
          "summary": "前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.Apache Shiro i",
          "toc": Array [
            Object {
              "children": Array [
                Object {
                  "children": Array [],
                  "id": "background",
                  "label": "Background",
                  "level": 2,
                  "pid": 0,
                  "position": 1,
                },
                Object {
                  "children": Array [
                    Object {
                      "children": Array [
                        Object {
                          "children": Array [],
                          "id": "业务场景假设",
                          "label": "业务场景假设",
                          "level": 4,
                          "pid": 3,
                          "position": 4,
                        },
                        Object {
                          "children": Array [
                            Object {
                              "children": Array [],
                              "id": "maven",
                              "label": "Maven",
                              "level": 5,
                              "pid": 5,
                              "position": 6,
                            },
                            Object {
                              "children": Array [],
                              "id": "webxml",
                              "label": "web.xml",
                              "level": 5,
                              "pid": 5,
                              "position": 7,
                            },
                            Object {
                              "children": Array [],
                              "id": "spring-applicationcontextxml",
                              "label": "Spring ApplicationContext.xml",
                              "level": 5,
                              "pid": 5,
                              "position": 8,
                            },
                            Object {
                              "children": Array [],
                              "id": "spring-applicationcontext-shiro-captchaxml",
                              "label": "Spring applicationContext-shiro-captcha.xml",
                              "level": 5,
                              "pid": 5,
                              "position": 9,
                            },
                          ],
                          "id": "shiro基本配置",
                          "label": "Shiro基本配置",
                          "level": 4,
                          "pid": 3,
                          "position": 5,
                        },
                        Object {
                          "children": Array [
                            Object {
                              "children": Array [
                                Object {
                                  "children": Array [],
                                  "id": "登录",
                                  "label": "登录",
                                  "level": 6,
                                  "pid": 11,
                                  "position": 12,
                                },
                                Object {
                                  "children": Array [],
                                  "id": "注销",
                                  "label": "注销",
                                  "level": 6,
                                  "pid": 11,
                                  "position": 13,
                                },
                              ],
                              "id": "登录与注销",
                              "label": "登录与注销",
                              "level": 5,
                              "pid": 10,
                              "position": 11,
                            },
                            Object {
                              "children": Array [],
                              "id": "同步登录与异步登陆",
                              "label": "同步登录与异步登陆",
                              "level": 5,
                              "pid": 10,
                              "position": 14,
                            },
                            Object {
                              "children": Array [],
                              "id": "角色校验",
                              "label": "角色校验",
                              "level": 5,
                              "pid": 10,
                              "position": 15,
                            },
                          ],
                          "id": "配置详解",
                          "label": "配置详解",
                          "level": 4,
                          "pid": 3,
                          "position": 10,
                        },
                      ],
                      "id": "url级别的权限控制",
                      "label": "URL级别的权限控制",
                      "level": 3,
                      "pid": 2,
                      "position": 3,
                    },
                  ],
                  "id": "权限控制",
                  "label": "权限控制",
                  "level": 2,
                  "pid": 0,
                  "position": 2,
                },
                Object {
                  "children": Array [],
                  "id": "summary",
                  "label": "Summary",
                  "level": 2,
                  "pid": 0,
                  "position": 16,
                },
              ],
              "id": "spring-整合-apache-shiro-实现各等级的权限管理",
              "label": "Spring 整合 Apache Shiro 实现各等级的权限管理",
              "level": 1,
              "pid": -1,
              "position": 0,
            },
          ],
        },
        "$posts": Array [],
        "loaded": false,
      }
    }
  >
    <Memo(wrappedComponent)
      match={
        Object {
          "isExact": false,
          "params": Object {},
          "path": "/posts/2015/10/25/some-post",
          "url": "/posts/2015/10/25/some-post",
        }
      }
      postStore={
        PostStore {
          "$detail": Object {
            "filename": "some-post",
            "html": "<h1 id=\\"spring-整合-apache-shiro-实现各等级的权限管理\\">Spring 整合 Apache Shiro 实现各等级的权限管理</h1>
<h2 id=\\"background\\">Background</h2>
<p>前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.</p>
<blockquote>
<p>Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication,
authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you
can quickly and easily secure any application – from the smallest mobile applications to the
largest web and enterprise applications.</p>
</blockquote>
<p>在参考过 IBM 开发社区关于Shiro的博客 一篇文章 <a href=\\"https://www.ibm.com/developerworks/cn/java/j-lo-shiro/\\">在Web项目中应用Apache Shiro</a>
与开涛博客的一个跟我学Shiro系列文章 <a href=\\"https://jinnianshilongnian.iteye.com/blog/2024723\\">开涛博客-跟我学Shiro</a></p>
<blockquote>
<p>不得不说的是IBM Developer社区的文章一向属于生动易懂.
但是上面的这篇讲得并没有之前推荐的讲Spring-DataJPA的那篇文章那样浅显,
于是才有了现在这份笔记</p>
</blockquote>
<h2 id=\\"权限控制\\">权限控制</h2>
<p>我所接触到的权限控制大概可以分成两个级别 URL和方法级别.</p>
<p>以常见的论坛用户来举例.论坛用户简要的分成两种 管理员<code>Admin</code>,普通用户<code>Normal</code>.
其中管理员能够进入用户管理,帖子管理的页面进行CRUD操作.
普通用户则只能进行自己帖子的CRU操作,以及顶贴什么的.</p>
<p>如果只进行URL级别的拦截,只需要在每一个URL的访问时 获取用户的角色是<code>Admin</code>还是<code>Normal</code>即可.</p>
<p>如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等).
但是由于跟数据库的设计密切相关,所以这个级别不细讲.
言归正传(不知道是不是看light大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解</p>
<h3 id=\\"url级别的权限控制\\">URL级别的权限控制</h3>
<h4 id=\\"业务场景假设\\">业务场景假设</h4>
<p>首先,我们假设有以下几种种URL</p>
<pre><code>/user/create        //用户创建,Admin专属
/post/create        //发帖 Admin,Normal共有
/login              //登陆
/logout             //注销
</code></pre>
<h4 id=\\"shiro基本配置\\">Shiro基本配置</h4>
<h5 id=\\"maven\\">Maven</h5>
<p><code>$&lt;shiro.version&gt;</code>请自行替换成当前的最新版本</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-core<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-spring<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-web<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">dependency</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">groupId</span>&gt;</span>org.apache.shiro<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">groupId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">artifactId</span>&gt;</span>shiro-ehcache<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">artifactId</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">version</span>&gt;</span>\${shiro.version}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">version</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">dependency</span>&gt;</span>
</code></pre>
<h5 id=\\"webxml\\">web.xml</h5>
<p>为了实现与Spring同一个级别的URL拦截,需要将Shiro的Filter配置在Spring MVC的Dispatcher Servlet同一个级别</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-name</span>&gt;</span>shiroFilter<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-name</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-class</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">init-param</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">param-name</span>&gt;</span>targetFilterLifecycle<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">param-name</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">param-value</span>&gt;</span>true<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">param-value</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">init-param</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-mapping</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">filter-name</span>&gt;</span>shiroFilter<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-name</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">url-pattern</span>&gt;</span>/*<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">url-pattern</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">filter-mapping</span>&gt;</span>
</code></pre>
<h5 id=\\"spring-applicationcontextxml\\">Spring ApplicationContext.xml</h5>
<p>在与Spring进行整合的时候,为了方便拼切配置,在Spring 里面导入另一份专用于Shiro的xml配置</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">import</span> <span class=\\"hljs-attr\\">resource</span>=<span class=\\"hljs-string\\">\\"config/security/applicationContext-shiro-captcha.xml\\"</span>/&gt;</span>
</code></pre>
<h5 id=\\"spring-applicationcontext-shiro-captchaxml\\">Spring applicationContext-shiro-captcha.xml</h5>
<p>先将整个 shiro的xml配置贴出来,接下来在逐一解说其内容</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-meta\\">&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">beans</span> <span class=\\"hljs-attr\\">xmlns</span>=<span class=\\"hljs-string\\">\\"https://www.springframework.org/schema/beans\\"</span> <span class=\\"hljs-attr\\">xmlns:xsi</span>=<span class=\\"hljs-string\\">\\"https://www.w3.org/2001/XMLSchema-instance\\"</span>
       <span class=\\"hljs-attr\\">xsi:schemaLocation</span>=<span class=\\"hljs-string\\">\\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\\"</span>
       <span class=\\"hljs-attr\\">default-lazy-init</span>=<span class=\\"hljs-string\\">\\"true\\"</span>&gt;</span>

    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">description</span>&gt;</span>Shiro安全配置<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">description</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"realm\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 項目自定义的Realm --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.BookingShiroRealm\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"userService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"userService\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 用户授权信息Cache, 采用EhCache --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.cache.ehcache.EhCacheManager\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManagerConfigFile\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"classpath:config/security/ehcache-shiro.xml\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"lifecycleBeanPostProcessor\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.LifecycleBeanPostProcessor\\"</span>/&gt;</span>


    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"adminPermissionFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.AdminPermissionFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"normalPermissionFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.NormalPermissionFilter\\"</span>/&gt;</span>

    <span class=\\"hljs-comment\\">&lt;!-- Shiro Filter --&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"successUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/booking/search\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"unauthorizedUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
                <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
                <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
                <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
            <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filterChainDefinitions\\"</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">value</span>&gt;</span>
                /=authc
                /register = anon
                /forgot =anon
                /login = anon
                /login/action* = anon
                /logout = logout
                /js/** = anon
                /rest/**=anon
                /image/**=anon
                /jawr_loader.js=anon
                /user/create=roles[admin]
                /post/create/**=roles[normal|admin]
                /** =authc
            <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">value</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">beans</span>&gt;</span>
</code></pre>
<h4 id=\\"配置详解\\">配置详解</h4>
<p>首先要理解一件事情,就是Shiro的权限控制 源自于Web.xml的Filter,在Filter中获取目标URL的请求,解析以达到根据请求是否到达下一集Filter的作用.
再要理解一件约定大于配置的问题,了解Shiro的一些默认配置解说.</p>
<p>在贴出来的<code>shiro-captcha.xml</code>配置代码中:</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-comment\\">&lt;!-- Shiro Filter --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroFilter\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"successUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/booking/search\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"unauthorizedUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
            <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
            <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
            <span class=\\"hljs-comment\\">&lt;!--&lt;entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/&gt;--&gt;</span>
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filterChainDefinitions\\"</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">value</span>&gt;</span>
            /=authc
            /register = anon
            /forgot =anon
            /login = anon
            /login/action* = anon
            /logout = logout
            /js/** = anon
            /rest/**=anon
            /image/**=anon
            /jawr_loader.js=anon
            /user/create=roles[admin]
            /post/create/**=roles[normal|admin]
            /** =authc
        <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">value</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>
</code></pre>
<p>先来看<code>&lt;property name=&quot;filterChainDefinitions&quot;&gt;</code>中的属性.
&lt;values&gt;的内容,其实是url对应权限的一些mapping.表示对应的url mapping 需要对应的权限.
其中<code>authc</code>,<code>anon</code>,<code>logout</code>样例中提及的这三个,是Shiro自己的默认配置</p>
<blockquote>
<p><code>authc</code>表示,这这个mapping代表的url需要登陆之后才能查看
<code>anon</code>表示,这个mapping代表的url全部放行,所以可以看到所有js文件与image文件都被放行了
<code>logout</code> 表示这个mapping代表的url将进行一次注销操作,在浏览器客户端进行的是session的注销,在服务器端则是进行缓存的删除</p>
</blockquote>
<p>其中 <code>roles[admin],roles[normal|admin]</code> 则是自己定义的过滤规则.
表示<code>/user/create</code>只有角色包含<code>admin</code>的有权限访问
且<code>/post/create</code>则是角色是<code>admin</code>或<code>normal</code>的有权限访问</p>
<h5 id=\\"登录与注销\\">登录与注销</h5>
<h6 id=\\"登录\\">登录</h6>
<p>对于所有需要登录的URL可以通过 <code>authc</code>一个拦截器来拦截
在未登录的状态下,所有所有需要登录的URL都是自动跳转到上面XML所配置的<code>loginUrl</code>之中.
当然这里返回的是 一个对 <code>/login</code>路径的get请求</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginUrl\\"</span> <span class=\\"hljs-attr\\">value</span>=<span class=\\"hljs-string\\">\\"/login\\"</span>/&gt;</span>
</code></pre>
<h6 id=\\"注销\\">注销</h6>
<p>注销也很简单,只要任意url能够跳转到<code>/logout</code>,便会自动注销.</p>
<h5 id=\\"同步登录与异步登陆\\">同步登录与异步登陆</h5>
<p>其实在Shiro的配置中,通过阅读源码可以看出,其实<code>loginUrl</code>一个属性,代表的是
当Method=Get的请求到达其值对应的url(/login)时,返回登录的页面.
当Method=Post的请求到达其值对应的url(/login)时,进入到的就是Shiro本身的登陆操作
该操作,通过读取<code>securityManager</code>的配置,</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span>/&gt;</span>
</code></pre>
<p>通过自定义的realm <code>BookingShiroRealm</code></p>
<blockquote>
<p>此处<code>BookingShiroRealm</code>是自己定义的名称,只是为了符合但是的业务需要起的名字</p>
</blockquote>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-comment\\">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"securityManager\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"realm\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>

<span class=\\"hljs-comment\\">&lt;!-- 項目自定义的Realm --&gt;</span>
<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">bean</span> <span class=\\"hljs-attr\\">id</span>=<span class=\\"hljs-string\\">\\"shiroRealm\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"com.quariuslt.service.security.BookingShiroRealm\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"loginSessionService\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"userService\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"userService\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"cacheManager\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"shiroEhcacheManager\\"</span>/&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">bean</span>&gt;</span>
</code></pre>
<p>接下来解说一下
<code>BookingShiroRealm.java</code>
的内容</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">BookingShiroRealm</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">AuthorizingRealm</span> </span>{
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String LOGIN_SESSION_NAME=<span class=\\"hljs-string\\">\\"loginSession\\"</span>;
    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String SIMPLE_AUTHORIZATION_INFO=<span class=\\"hljs-string\\">\\"simpleAuthorizationInfo\\"</span>;

    <span class=\\"hljs-keyword\\">private</span> LoginSessionService loginSessionService;

    <span class=\\"hljs-keyword\\">private</span> UserService userService;


    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> LoginSessionService <span class=\\"hljs-title\\">getLoginSessionService</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> loginSessionService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setLoginSessionService</span><span class=\\"hljs-params\\">(LoginSessionService loginSessionService)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.loginSessionService = loginSessionService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> UserService <span class=\\"hljs-title\\">getUserService</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> userService;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setUserService</span><span class=\\"hljs-params\\">(UserService userService)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.userService = userService;
    }

    <span class=\\"hljs-comment\\">/*授权信息*/</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthorizationInfo <span class=\\"hljs-title\\">doGetAuthorizationInfo</span><span class=\\"hljs-params\\">(PrincipalCollection principals)</span> </span>{
        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
        <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\\"hljs-keyword\\">null</span>){
            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
        }
        <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\\"hljs-keyword\\">null</span>){

            UserDto userDto=userService.findUserById(loginSession.getUserId());
            <span class=\\"hljs-keyword\\">if</span> (userDto != <span class=\\"hljs-keyword\\">null</span>) {
                SimpleAuthorizationInfo info = <span class=\\"hljs-keyword\\">new</span> SimpleAuthorizationInfo();
                Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
                <span class=\\"hljs-keyword\\">for</span>(RoleDto roleDto:roleDtoSet){
                    info.addRole(roleDto.getName().toLowerCase());
                }

                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
            } <span class=\\"hljs-keyword\\">else</span> {
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
            }
        }
        <span class=\\"hljs-keyword\\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
    }

    <span class=\\"hljs-comment\\">/*认证信息*/</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthenticationInfo <span class=\\"hljs-title\\">doGetAuthenticationInfo</span><span class=\\"hljs-params\\">(AuthenticationToken authenticationToken)</span> <span class=\\"hljs-keyword\\">throws</span> AuthenticationException </span>{
        System.out.println(<span class=\\"hljs-string\\">\\"Come to BookingShiroRealm\\"</span>);
        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;
        String userId=token.getUsername();
        String cryptedPassword= String.valueOf(token.getPassword());
        <span class=\\"hljs-keyword\\">if</span>(StringUtils.isNotEmpty(userId)){
            UserDto targetUser=userService.getByUserId(userId);
            System.out.println(<span class=\\"hljs-string\\">\\"TargetUser:\\"</span>+userId+<span class=\\"hljs-string\\">\\" InputPassWord:\\"</span>+cryptedPassword+<span class=\\"hljs-string\\">\\" DB PassWord:\\"</span>+targetUser.getCryptedPassword());
            <span class=\\"hljs-keyword\\">if</span>(cryptedPassword.equals(targetUser.getCryptedPassword())){
                System.out.println(<span class=\\"hljs-string\\">\\"BookingShiroRealm:Login Success\\"</span>);
                LoginSession loginSession=<span class=\\"hljs-keyword\\">new</span> LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());
                loginSessionService.clearSessionByUserId(userId);
                loginSessionService.save(loginSession);
                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());
            }
        }
        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
    }
}

</code></pre>
<p><code>AuthorizingRealm</code>是Shiro负责身份认证的抽象类.
需要实现其<code>doGetAuthenticationInfo</code>方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程.
和实现其<code>doGetAuthorizationInfo</code>方法,实现对需要登陆之后 对权限的认证.</p>
<p>在说到登陆的校验之前,可以看到在<code>doGetAuthenticationInfo</code>方法里面 有一个authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢.
此时返回来回到Spring配置Shiro的xml <code>applicationContext-shiro-captcha.xml</code>
会发现</p>
<pre><code class=\\"hljs xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">property</span> <span class=\\"hljs-attr\\">name</span>=<span class=\\"hljs-string\\">\\"filters\\"</span>&gt;</span>
    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">map</span>&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"authc\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"roles[admin]\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
        <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">entry</span> <span class=\\"hljs-attr\\">key</span>=<span class=\\"hljs-string\\">\\"roles[normal]\\"</span> <span class=\\"hljs-attr\\">value-ref</span>=<span class=\\"hljs-string\\">\\"captchaFilter\\"</span>/&gt;</span>
    <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">map</span>&gt;</span>
<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">property</span>&gt;</span>
</code></pre>
<p>里面会有一个<code>captchaFilter</code>,
指向其注入的类 <code>CaptchaFormAuthenticationFilter.java</code></p>
<p>附上<code>CaptchaFormAuthenticationFilter</code>代码</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">CaptchaFormAuthenticationFilter</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">FormAuthenticationFilter</span> </span>{

    <span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">static</span> <span class=\\"hljs-keyword\\">final</span> String DEFAULT_CAPTCHA_PARAM = <span class=\\"hljs-string\\">\\"captcha\\"</span>;

    <span class=\\"hljs-keyword\\">private</span> String captchaParam = DEFAULT_CAPTCHA_PARAM;

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getCaptchaParam</span><span class=\\"hljs-params\\">()</span> </span>{

        <span class=\\"hljs-keyword\\">return</span> captchaParam;

    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> String <span class=\\"hljs-title\\">getCaptcha</span><span class=\\"hljs-params\\">(ServletRequest request)</span> </span>{

        <span class=\\"hljs-keyword\\">return</span> WebUtils.getCleanParam(request, getCaptchaParam());

    }

    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">boolean</span> <span class=\\"hljs-title\\">onLoginFailure</span><span class=\\"hljs-params\\">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> </span>{
        setFailureAttribute(request, e);
        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">true</span>;
    }

    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setFailureAttribute</span><span class=\\"hljs-params\\">(ServletRequest request, AuthenticationException ae)</span> </span>{
        String className = ae.getClass().getName();
        request.setAttribute(getFailureKeyAttribute(), className);
    }

    <span class=\\"hljs-comment\\">//这里进行密码的加密</span>
    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> CaptchaUsernamePasswordToken <span class=\\"hljs-title\\">createToken</span><span class=\\"hljs-params\\">(ServletRequest request, ServletResponse response)</span> </span>{
        System.out.println(<span class=\\"hljs-string\\">\\"Come to CreateToken\\"</span>);
        String username = getUsername(request);
        String password = getPassword(request);
        String captcha = getCaptcha(request);
        <span class=\\"hljs-keyword\\">boolean</span> rememberMe = isRememberMe(request);
        String host = getHost(request);

        System.out.println(<span class=\\"hljs-string\\">\\"Captcha UserName(UserId):\\"</span> + username);
        System.out.println(<span class=\\"hljs-string\\">\\"Captcha Password:\\"</span> + password);
        System.out.println(<span class=\\"hljs-string\\">\\"Captcha RememberMe:\\"</span> + rememberMe);


        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> CaptchaUsernamePasswordToken(username,
                password.toCharArray(), rememberMe, host, captcha);

    }


    <span class=\\"hljs-meta\\">@Override</span>
    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> <span class=\\"hljs-keyword\\">boolean</span> <span class=\\"hljs-title\\">executeLogin</span><span class=\\"hljs-params\\">(ServletRequest request, ServletResponse response)</span> <span class=\\"hljs-keyword\\">throws</span> Exception </span>{
        CaptchaUsernamePasswordToken token = createToken(request, response);

        <span class=\\"hljs-keyword\\">try</span> {
            System.out.println(<span class=\\"hljs-string\\">\\"Execute Login~\\"</span>);
            Subject subject = getSubject(request, response);
            subject.login(token);

            <span class=\\"hljs-keyword\\">return</span> onLoginSuccess(token,subject, request, response);
        } <span class=\\"hljs-keyword\\">catch</span> (AuthenticationException e) {
            <span class=\\"hljs-keyword\\">return</span> onLoginFailure(token,e, request, response);
        }
    }
}
</code></pre>
<p>继承<code>FormAuthenticationFilter</code>的<code>CaptchaFormAuthenticationFilter</code>并重写其<code>CaptchaUsernamePasswordToken</code>方法.
用于通过<code>/login</code>的POST方式提交过来的时候,便会先经过此filter的<code>createToken</code>方法进行token的生成</p>
<p>假设有一个登陆页面的<code>/login</code>使用同步提交方式,即通过页面的form表单,<code>action=&quot;/login&quot;</code>,<code>method=&quot;POST&quot;</code>提交到后台,触发流程是</p>
<blockquote>
<ol>
<li>到达 <code>FormAuthenticationFilter</code> 根据表单 生成Token.</li>
<li>调用 Shiro专门处理认证的 <code>subject</code>其<code>login</code>方法进行登陆</li>
<li><code>login</code>方法 通过调用 自定义的<code>BookingShiroRealm</code>方法所实现的顶级接口 来实现对数据库的信息的读取</li>
<li>判定登陆用户名与密码 匹配之后,可以通过Shiro自己配置的缓存保存认证信息.</li>
</ol>
</blockquote>
<p>但是在这个时代,还通过同步登陆 实在是太TM捞了,其实异步登陆提交,只需要 手动调用subject.login方法即可
将第一步到达<code>FormAuthenticationFilter</code>的token手动生成</p>
<p>异步登陆的实现代码 大概如下(以Controller为例)</p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-meta\\">@RequestMapping</span>(value = <span class=\\"hljs-string\\">\\"/action\\"</span>, method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
<span class=\\"hljs-meta\\">@ResponseBody</span>
<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> LoginMessage <span class=\\"hljs-title\\">loginAction</span><span class=\\"hljs-params\\">(
        @RequestParam(value = <span class=\\"hljs-string\\">\\"username\\"</span>)</span> String username,
        @<span class=\\"hljs-title\\">RequestParam</span><span class=\\"hljs-params\\">(value = <span class=\\"hljs-string\\">\\"password\\"</span>)</span> String password,
        @<span class=\\"hljs-title\\">RequestParam</span><span class=\\"hljs-params\\">(value = <span class=\\"hljs-string\\">\\"rememberMe\\"</span>, required = <span class=\\"hljs-keyword\\">false</span>, defaultValue = <span class=\\"hljs-string\\">\\"false\\"</span>)</span> <span class=\\"hljs-keyword\\">boolean</span> rememberMe,
        ServletRequest request) </span>{
    LoginMessage loginMessage = <span class=\\"hljs-keyword\\">new</span> LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());
    Subject subject = SecurityUtils.getSubject();


    <span class=\\"hljs-comment\\">//尝试获取 跳转到Login前的那个页面的url</span>
    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">null</span> != WebUtils.getSavedRequest(request)) {
        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();
        loginMessage.setRedirect(requestURI);
    }

    <span class=\\"hljs-keyword\\">try</span> {
        String salt=userService.getByUserId(username).getSalt();
        UsernamePasswordToken token = <span class=\\"hljs-keyword\\">new</span> UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));
        subject.login(token);
        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());

        <span class=\\"hljs-comment\\">//尝试判断 用户是不是第一次登陆</span>
        UserDto currentUser=userService.getByUserId(username);
        <span class=\\"hljs-keyword\\">if</span> (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){
            String redirectPath=request.getServletContext().getContextPath()+<span class=\\"hljs-string\\">\\"/user/password/reset\\"</span>;
            loginMessage.setRedirect(redirectPath);
        }


    } <span class=\\"hljs-keyword\\">catch</span> (UnknownAccountException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());
    } <span class=\\"hljs-keyword\\">catch</span> (IncorrectCredentialsException |NullPointerException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());
    } <span class=\\"hljs-keyword\\">catch</span> (AuthenticationException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());
    }
    <span class=\\"hljs-keyword\\">return</span> loginMessage;
}

<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">LoginMessage</span> </span>{
    <span class=\\"hljs-keyword\\">private</span> String status;
    <span class=\\"hljs-keyword\\">private</span> String message;
    <span class=\\"hljs-keyword\\">private</span> String redirect;

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-title\\">LoginMessage</span><span class=\\"hljs-params\\">(String status)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.status = status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getStatus</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setStatus</span><span class=\\"hljs-params\\">(String status)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.status = status;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getMessage</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> message;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setMessage</span><span class=\\"hljs-params\\">(String message)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.message = message;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> String <span class=\\"hljs-title\\">getRedirect</span><span class=\\"hljs-params\\">()</span> </span>{
        <span class=\\"hljs-keyword\\">return</span> redirect;
    }

    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">public</span> <span class=\\"hljs-keyword\\">void</span> <span class=\\"hljs-title\\">setRedirect</span><span class=\\"hljs-params\\">(String redirect)</span> </span>{
        <span class=\\"hljs-keyword\\">this</span>.redirect = redirect;
    }
}
</code></pre>
<h5 id=\\"角色校验\\">角色校验</h5>
<p>登陆的时候,其实只是实现了 <code>登陆认证</code>,<code>缓存登录信息</code>的过程.
并没有实现,<code>权限赋予</code>的过程.只有第一次遇到 需要登陆且特定权限的url的时候,才会请求后台是否有进入对应url的权限.</p>
<p>在讲权限之前,概括一下数据库的设计</p>
<pre><code class=\\"hljs SQL\\"><span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> <span class=\\"hljs-keyword\\">USERS</span>
(
    <span class=\\"hljs-keyword\\">ID</span> <span class=\\"hljs-built_in\\">BIGINT</span> PRIMARY <span class=\\"hljs-keyword\\">KEY</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span> AUTO_INCREMENT,
    ACTIVE <span class=\\"hljs-built_in\\">BIT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    ADDRESS <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">300</span>),
    CITY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    COMPANY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    COUNTRY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    CRYPTED_PASSWORD <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>),
    DEPARTMENT <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    DISPLAY_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">128</span>),
    EMAIL <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">60</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    FAX <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    FIRST_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    GENDER <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">6</span>),
    JOBTITLE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    LAST_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    LOCATION <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">50</span>),
    MIDDLE_NAME <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">40</span>),
    OFFICE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    OFFICECODE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">22</span>),
    PHONE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">128</span>),
    <span class=\\"hljs-keyword\\">SALT</span> <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    STAFFID <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>),
    STAFFROLE <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">15</span>),
    TERRITORY <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">100</span>),
    USERID <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">20</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>
);


<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> <span class=\\"hljs-keyword\\">ROLES</span>
(
    <span class=\\"hljs-keyword\\">ID</span> <span class=\\"hljs-built_in\\">BIGINT</span> PRIMARY <span class=\\"hljs-keyword\\">KEY</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span> AUTO_INCREMENT,
    DESCRIPTION <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>),
    <span class=\\"hljs-keyword\\">NAME</span> <span class=\\"hljs-built_in\\">VARCHAR</span>(<span class=\\"hljs-number\\">255</span>) <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>
);
<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">UNIQUE</span> <span class=\\"hljs-keyword\\">INDEX</span> UK_OFX66KERUAPI6VYQPV6F2OR37 <span class=\\"hljs-keyword\\">ON</span> <span class=\\"hljs-keyword\\">ROLES</span> (<span class=\\"hljs-keyword\\">NAME</span>);

<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">TABLE</span> ROLE_USER
(
    ROLE_ID <span class=\\"hljs-built_in\\">BIGINT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    USER_ID <span class=\\"hljs-built_in\\">BIGINT</span> <span class=\\"hljs-keyword\\">NOT</span> <span class=\\"hljs-literal\\">NULL</span>,
    PRIMARY <span class=\\"hljs-keyword\\">KEY</span> (ROLE_ID, USER_ID),
    <span class=\\"hljs-keyword\\">FOREIGN</span> <span class=\\"hljs-keyword\\">KEY</span> (ROLE_ID) <span class=\\"hljs-keyword\\">REFERENCES</span> <span class=\\"hljs-keyword\\">ROLES</span> (<span class=\\"hljs-keyword\\">ID</span>),
    <span class=\\"hljs-keyword\\">FOREIGN</span> <span class=\\"hljs-keyword\\">KEY</span> (USER_ID) <span class=\\"hljs-keyword\\">REFERENCES</span> <span class=\\"hljs-keyword\\">USERS</span> (<span class=\\"hljs-keyword\\">ID</span>)
);

<span class=\\"hljs-keyword\\">CREATE</span> <span class=\\"hljs-keyword\\">INDEX</span> FK_NJAJEL6A2Q8TR36EMB9L8VW7N <span class=\\"hljs-keyword\\">ON</span> ROLE_USER (USER_ID);

</code></pre>
<p>数据库有三个表 <code>USERS</code>,<code>ROLES</code>,<code>USER_ROLE</code>
其实在设计上<code>User</code>表跟<code>ROLE</code>表是多对多的关系,即User里面有一个Set&lt;Role&gt;,Role里面也有一个Set&lt;User&gt;
通过中间表<code>USER_ROLE</code>来实现多对多关联.</p>
<p>下面来看 身份认证的具体实现
<code>BookingShiroRealm.java</code></p>
<pre><code class=\\"hljs Java\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">protected</span> AuthorizationInfo <span class=\\"hljs-title\\">doGetAuthorizationInfo</span><span class=\\"hljs-params\\">(PrincipalCollection principals)</span> </span>{
    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
    <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==<span class=\\"hljs-keyword\\">null</span>){
        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
    }
    <span class=\\"hljs-keyword\\">if</span>(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==<span class=\\"hljs-keyword\\">null</span>){

        UserDto userDto=userService.findUserById(loginSession.getUserId());
        <span class=\\"hljs-keyword\\">if</span> (userDto != <span class=\\"hljs-keyword\\">null</span>) {
            SimpleAuthorizationInfo info = <span class=\\"hljs-keyword\\">new</span> SimpleAuthorizationInfo();
            Set&lt;RoleDto&gt; roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
            <span class=\\"hljs-keyword\\">for</span>(RoleDto roleDto:roleDtoSet){
                info.addRole(roleDto.getName().toLowerCase());
            }

            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
        } <span class=\\"hljs-keyword\\">else</span> {
            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">null</span>;
        }
    }
    <span class=\\"hljs-keyword\\">return</span> (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
}
</code></pre>
<p>通过</p>
<pre><code class=\\"hljs Java\\">Subject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)
</code></pre>
<p>来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在Session里面.
当需要对应的权限,且发现已经有<code>SIMPLE_AUTHORIZATION_INFO</code>这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.</p>
<p>当然 对应权限的获取,也是通过shiro 配置里面的captchaFilter的具体实现类,实现其<code>isAccessAllowed</code>方法来判定.</p>
<h2 id=\\"summary\\">Summary</h2>
<p>本次主要分享了Share 如何在Spring中整合Apache Shiro的过程.
但是整体配置依然是通过XML统一配置,其实Shiro在近期的版本已经有了Annotation级别的方法能够方便的对URL的Mapping进行注解.
具体的应用过程,就像Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.</p>
",
            "images": Array [],
            "md": "# Spring 整合 Apache Shiro 实现各等级的权限管理

\`\`\`metadata
title: Spring 整合 Apache Shiro 实现各等级的权限管理
created: 2015-10-25
updated: 2015-10-25
category: Blog
tags:
- Spring
- Security
- Shiro
- Java
\`\`\`


## Background

前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.

> Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication,
> authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you
> can quickly and easily secure any application – from the smallest mobile applications to the
> largest web and enterprise applications.


在参考过 IBM 开发社区关于Shiro的博客 一篇文章 [在Web项目中应用Apache Shiro](https://www.ibm.com/developerworks/cn/java/j-lo-shiro/)
与开涛博客的一个跟我学Shiro系列文章 [开涛博客-跟我学Shiro](https://jinnianshilongnian.iteye.com/blog/2024723)

> 不得不说的是IBM Developer社区的文章一向属于生动易懂.
> 但是上面的这篇讲得并没有之前推荐的讲Spring-DataJPA的那篇文章那样浅显,
> 于是才有了现在这份笔记


## 权限控制

我所接触到的权限控制大概可以分成两个级别 URL和方法级别.


以常见的论坛用户来举例.论坛用户简要的分成两种 管理员\`Admin\`,普通用户\`Normal\`.
其中管理员能够进入用户管理,帖子管理的页面进行CRUD操作.
普通用户则只能进行自己帖子的CRU操作,以及顶贴什么的.

如果只进行URL级别的拦截,只需要在每一个URL的访问时 获取用户的角色是\`Admin\`还是\`Normal\`即可.

如果是进行方法级别的拦截,则可能根据功能的设计衍生出很多设计方案(一眼就能想到的大概是树状,平行等).
但是由于跟数据库的设计密切相关,所以这个级别不细讲.
言归正传(不知道是不是看light大大博客看多了,语气有点奇怪),下面结合上面的论坛用户的一个场景进行逻辑与代码的讲解

### URL级别的权限控制

#### 业务场景假设

首先,我们假设有以下几种种URL
\`\`\`
/user/create        //用户创建,Admin专属
/post/create        //发帖 Admin,Normal共有
/login              //登陆
/logout             //注销
\`\`\`

#### Shiro基本配置

##### Maven
\`$<shiro.version>\`请自行替换成当前的最新版本
\`\`\`xml
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-core</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-spring</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-web</artifactId>
    <version>\${shiro.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.shiro</groupId>
    <artifactId>shiro-ehcache</artifactId>
    <version>\${shiro.version}</version>
</dependency>
\`\`\`

##### web.xml
为了实现与Spring同一个级别的URL拦截,需要将Shiro的Filter配置在Spring MVC的Dispatcher Servlet同一个级别
\`\`\`xml
<filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
        <param-name>targetFilterLifecycle</param-name>
        <param-value>true</param-value>
    </init-param>
</filter>
<filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
\`\`\`

##### Spring ApplicationContext.xml
在与Spring进行整合的时候,为了方便拼切配置,在Spring 里面导入另一份专用于Shiro的xml配置
\`\`\`xml
<import resource=\\"config/security/applicationContext-shiro-captcha.xml\\"/>
\`\`\`

##### Spring applicationContext-shiro-captcha.xml
先将整个 shiro的xml配置贴出来,接下来在逐一解说其内容
\`\`\`xml
<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<beans xmlns=\\"https://www.springframework.org/schema/beans\\" xmlns:xsi=\\"https://www.w3.org/2001/XMLSchema-instance\\"
       xsi:schemaLocation=\\"https://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd\\"
       default-lazy-init=\\"true\\">

    <description>Shiro安全配置</description>

    <!-- Shiro's main business-tier object for web-enabled applications -->
    <bean id=\\"securityManager\\" class=\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\">
        <property name=\\"realm\\" ref=\\"shiroRealm\\"/>
        <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id=\\"shiroRealm\\" class=\\"com.quariuslt.service.security.BookingShiroRealm\\">
        <property name=\\"loginSessionService\\" ref=\\"loginSessionService\\"/>
        <property name=\\"userService\\" ref=\\"userService\\"/>
        <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
    </bean>

    <!-- 用户授权信息Cache, 采用EhCache -->
    <bean id=\\"shiroEhcacheManager\\" class=\\"org.apache.shiro.cache.ehcache.EhCacheManager\\">
        <property name=\\"cacheManagerConfigFile\\" value=\\"classpath:config/security/ehcache-shiro.xml\\"/>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id=\\"lifecycleBeanPostProcessor\\" class=\\"org.apache.shiro.spring.LifecycleBeanPostProcessor\\"/>


    <bean class=\\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\\">
        <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
    </bean>

    <bean id=\\"captchaFilter\\" class=\\"com.quariuslt.service.security.CaptchaFormAuthenticationFilter\\"/>
    <bean id=\\"adminPermissionFilter\\" class=\\"com.quariuslt.service.security.AdminPermissionFilter\\"/>
    <bean id=\\"normalPermissionFilter\\" class=\\"com.quariuslt.service.security.NormalPermissionFilter\\"/>

    <!-- Shiro Filter -->
    <bean id=\\"shiroFilter\\" class=\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\">
        <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
        <property name=\\"loginUrl\\" value=\\"/login\\"/>
        <property name=\\"successUrl\\" value=\\"/booking/search\\"/>
        <property name=\\"unauthorizedUrl\\" value=\\"/\\"/>
        <property name=\\"filters\\">
            <map>
                <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
                <!--<entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>-->
                <!--<entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>-->
            </map>
        </property>
        <property name=\\"filterChainDefinitions\\">
            <value>
                /=authc
                /register = anon
                /forgot =anon
                /login = anon
                /login/action* = anon
                /logout = logout
                /js/** = anon
                /rest/**=anon
                /image/**=anon
                /jawr_loader.js=anon
                /user/create=roles[admin]
                /post/create/**=roles[normal|admin]
                /** =authc
            </value>
        </property>
    </bean>

</beans>
\`\`\`

#### 配置详解
首先要理解一件事情,就是Shiro的权限控制 源自于Web.xml的Filter,在Filter中获取目标URL的请求,解析以达到根据请求是否到达下一集Filter的作用.
再要理解一件约定大于配置的问题,了解Shiro的一些默认配置解说.

在贴出来的\`shiro-captcha.xml\`配置代码中:
\`\`\`xml
<!-- Shiro Filter -->
<bean id=\\"shiroFilter\\" class=\\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\\">
    <property name=\\"securityManager\\" ref=\\"securityManager\\"/>
    <property name=\\"loginUrl\\" value=\\"/login\\"/>
    <property name=\\"successUrl\\" value=\\"/booking/search\\"/>
    <property name=\\"unauthorizedUrl\\" value=\\"/\\"/>
    <property name=\\"filters\\">
        <map>
            <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
            <!--<entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>-->
            <!--<entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>-->
        </map>
    </property>
    <property name=\\"filterChainDefinitions\\">
        <value>
            /=authc
            /register = anon
            /forgot =anon
            /login = anon
            /login/action* = anon
            /logout = logout
            /js/** = anon
            /rest/**=anon
            /image/**=anon
            /jawr_loader.js=anon
            /user/create=roles[admin]
            /post/create/**=roles[normal|admin]
            /** =authc
        </value>
    </property>
</bean>
\`\`\`
先来看\`<property name=\\"filterChainDefinitions\\">\`中的属性.
<values>的内容,其实是url对应权限的一些mapping.表示对应的url mapping 需要对应的权限.
其中\`authc\`,\`anon\`,\`logout\`样例中提及的这三个,是Shiro自己的默认配置
> \`authc\`表示,这这个mapping代表的url需要登陆之后才能查看
> \`anon\`表示,这个mapping代表的url全部放行,所以可以看到所有js文件与image文件都被放行了
> \`logout\` 表示这个mapping代表的url将进行一次注销操作,在浏览器客户端进行的是session的注销,在服务器端则是进行缓存的删除

其中 \`roles[admin],roles[normal|admin]\` 则是自己定义的过滤规则.
表示\`/user/create\`只有角色包含\`admin\`的有权限访问
且\`/post/create\`则是角色是\`admin\`或\`normal\`的有权限访问


##### 登录与注销

###### 登录
对于所有需要登录的URL可以通过 \`authc\`一个拦截器来拦截
在未登录的状态下,所有所有需要登录的URL都是自动跳转到上面XML所配置的\`loginUrl\`之中.
当然这里返回的是 一个对 \`/login\`路径的get请求
\`\`\`xml
<property name=\\"loginUrl\\" value=\\"/login\\"/>
\`\`\`
###### 注销
注销也很简单,只要任意url能够跳转到\`/logout\`,便会自动注销.


##### 同步登录与异步登陆
其实在Shiro的配置中,通过阅读源码可以看出,其实\`loginUrl\`一个属性,代表的是
当Method=Get的请求到达其值对应的url(/login)时,返回登录的页面.
当Method=Post的请求到达其值对应的url(/login)时,进入到的就是Shiro本身的登陆操作
该操作,通过读取\`securityManager\`的配置,
\`\`\`xml
<property name=\\"securityManager\\" ref=\\"securityManager\\"/>
\`\`\`

通过自定义的realm \`BookingShiroRealm\`
> 此处\`BookingShiroRealm\`是自己定义的名称,只是为了符合但是的业务需要起的名字

\`\`\`xml
<!-- Shiro's main business-tier object for web-enabled applications -->
<bean id=\\"securityManager\\" class=\\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\\">
    <property name=\\"realm\\" ref=\\"shiroRealm\\"/>
    <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
</bean>

<!-- 項目自定义的Realm -->
<bean id=\\"shiroRealm\\" class=\\"com.quariuslt.service.security.BookingShiroRealm\\">
    <property name=\\"loginSessionService\\" ref=\\"loginSessionService\\"/>
    <property name=\\"userService\\" ref=\\"userService\\"/>
    <property name=\\"cacheManager\\" ref=\\"shiroEhcacheManager\\"/>
</bean>
\`\`\`

接下来解说一下
\`BookingShiroRealm.java\`
的内容

\`\`\`Java
public class BookingShiroRealm extends AuthorizingRealm {
    public static final String LOGIN_SESSION_NAME=\\"loginSession\\";
    public static final String SIMPLE_AUTHORIZATION_INFO=\\"simpleAuthorizationInfo\\";

    private LoginSessionService loginSessionService;

    private UserService userService;


    public LoginSessionService getLoginSessionService() {
        return loginSessionService;
    }

    public void setLoginSessionService(LoginSessionService loginSessionService) {
        this.loginSessionService = loginSessionService;
    }

    public UserService getUserService() {
        return userService;
    }

    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /*授权信息*/
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
        if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){
            SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
        }
        if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){

            UserDto userDto=userService.findUserById(loginSession.getUserId());
            if (userDto != null) {
                SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
                Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
                for(RoleDto roleDto:roleDtoSet){
                    info.addRole(roleDto.getName().toLowerCase());
                }

                SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
            } else {
                return null;
            }
        }
        return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
    }

    /*认证信息*/
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        System.out.println(\\"Come to BookingShiroRealm\\");
        UsernamePasswordToken token=(UsernamePasswordToken)authenticationToken;
        String userId=token.getUsername();
        String cryptedPassword= String.valueOf(token.getPassword());
        if(StringUtils.isNotEmpty(userId)){
            UserDto targetUser=userService.getByUserId(userId);
            System.out.println(\\"TargetUser:\\"+userId+\\" InputPassWord:\\"+cryptedPassword+\\" DB PassWord:\\"+targetUser.getCryptedPassword());
            if(cryptedPassword.equals(targetUser.getCryptedPassword())){
                System.out.println(\\"BookingShiroRealm:Login Success\\");
                LoginSession loginSession=new LoginSession(targetUser.getId(), targetUser.getUserId(),targetUser.getEmail(),SecurityUtils.getSubject().getSession().getHost());
                loginSessionService.clearSessionByUserId(userId);
                loginSessionService.save(loginSession);
                return new SimpleAuthenticationInfo(loginSession,targetUser.getCryptedPassword().toCharArray(),getName());
            }
        }
        return null;
    }
}

\`\`\`
\`AuthorizingRealm\`是Shiro负责身份认证的抽象类.
需要实现其\`doGetAuthenticationInfo\`方法,实现 对提交过来的用户名/密码 等账号信息,跟数据库进行交互判定登陆是否成功的过程.
和实现其\`doGetAuthorizationInfo\`方法,实现对需要登陆之后 对权限的认证.


在说到登陆的校验之前,可以看到在\`doGetAuthenticationInfo\`方法里面 有一个authenticationToken.里面包含了登陆传递过来的用户名和密码信息.这里又是怎么来的呢.
此时返回来回到Spring配置Shiro的xml \`applicationContext-shiro-captcha.xml\`
会发现
\`\`\`xml
<property name=\\"filters\\">
    <map>
        <entry key=\\"authc\\" value-ref=\\"captchaFilter\\"/>
        <entry key=\\"roles[admin]\\" value-ref=\\"captchaFilter\\"/>
        <entry key=\\"roles[normal]\\" value-ref=\\"captchaFilter\\"/>
    </map>
</property>
\`\`\`
里面会有一个\`captchaFilter\`,
指向其注入的类 \`CaptchaFormAuthenticationFilter.java\`

附上\`CaptchaFormAuthenticationFilter\`代码
\`\`\`Java
public class CaptchaFormAuthenticationFilter extends FormAuthenticationFilter {

    public static final String DEFAULT_CAPTCHA_PARAM = \\"captcha\\";

    private String captchaParam = DEFAULT_CAPTCHA_PARAM;

    public String getCaptchaParam() {

        return captchaParam;

    }

    protected String getCaptcha(ServletRequest request) {

        return WebUtils.getCleanParam(request, getCaptchaParam());

    }

    @Override
    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) {
        setFailureAttribute(request, e);
        return true;
    }

    @Override
    protected void setFailureAttribute(ServletRequest request, AuthenticationException ae) {
        String className = ae.getClass().getName();
        request.setAttribute(getFailureKeyAttribute(), className);
    }

    //这里进行密码的加密
    @Override
    protected CaptchaUsernamePasswordToken createToken(ServletRequest request, ServletResponse response) {
        System.out.println(\\"Come to CreateToken\\");
        String username = getUsername(request);
        String password = getPassword(request);
        String captcha = getCaptcha(request);
        boolean rememberMe = isRememberMe(request);
        String host = getHost(request);

        System.out.println(\\"Captcha UserName(UserId):\\" + username);
        System.out.println(\\"Captcha Password:\\" + password);
        System.out.println(\\"Captcha RememberMe:\\" + rememberMe);


        return new CaptchaUsernamePasswordToken(username,
                password.toCharArray(), rememberMe, host, captcha);

    }


    @Override
    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception {
        CaptchaUsernamePasswordToken token = createToken(request, response);

        try {
            System.out.println(\\"Execute Login~\\");
            Subject subject = getSubject(request, response);
            subject.login(token);

            return onLoginSuccess(token,subject, request, response);
        } catch (AuthenticationException e) {
            return onLoginFailure(token,e, request, response);
        }
    }
}
\`\`\`
继承\`FormAuthenticationFilter\`的\`CaptchaFormAuthenticationFilter\`并重写其\`CaptchaUsernamePasswordToken\`方法.
用于通过\`/login\`的POST方式提交过来的时候,便会先经过此filter的\`createToken\`方法进行token的生成


假设有一个登陆页面的\`/login\`使用同步提交方式,即通过页面的form表单,\`action=\\"/login\\"\`,\`method=\\"POST\\"\`提交到后台,触发流程是
> 1. 到达 \`FormAuthenticationFilter\` 根据表单 生成Token.
> 2. 调用 Shiro专门处理认证的 \`subject\`其\`login\`方法进行登陆
> 3. \`login\`方法 通过调用 自定义的\`BookingShiroRealm\`方法所实现的顶级接口 来实现对数据库的信息的读取
> 4. 判定登陆用户名与密码 匹配之后,可以通过Shiro自己配置的缓存保存认证信息.

但是在这个时代,还通过同步登陆 实在是太TM捞了,其实异步登陆提交,只需要 手动调用subject.login方法即可
将第一步到达\`FormAuthenticationFilter\`的token手动生成

异步登陆的实现代码 大概如下(以Controller为例)
\`\`\`Java
@RequestMapping(value = \\"/action\\", method = RequestMethod.POST,produces = MediaType.APPLICATION_JSON_VALUE)
@ResponseBody
public LoginMessage loginAction(
        @RequestParam(value = \\"username\\") String username,
        @RequestParam(value = \\"password\\") String password,
        @RequestParam(value = \\"rememberMe\\", required = false, defaultValue = \\"false\\") boolean rememberMe,
        ServletRequest request) {
    LoginMessage loginMessage = new LoginMessage(BKGConstants.ActionStatus.FAILURE.getDescription());
    Subject subject = SecurityUtils.getSubject();


    //尝试获取 跳转到Login前的那个页面的url
    if(null != WebUtils.getSavedRequest(request)) {
        String requestURI= WebUtils.getSavedRequest(request).getRequestURI();
        loginMessage.setRedirect(requestURI);
    }

    try {
        String salt=userService.getByUserId(username).getSalt();
        UsernamePasswordToken token = new UsernamePasswordToken(username, EncryptUtil.encrypt(password,salt));
        subject.login(token);
        loginMessage.setStatus(BKGConstants.ActionStatus.SUCCESS.getDescription());

        //尝试判断 用户是不是第一次登陆
        UserDto currentUser=userService.getByUserId(username);
        if (currentUser.getActive().equals(BKGConstants.UserAccountStatus.FIRST_LOGIN.getIndex())){
            String redirectPath=request.getServletContext().getContextPath()+\\"/user/password/reset\\";
            loginMessage.setRedirect(redirectPath);
        }


    } catch (UnknownAccountException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.PASSWORD_WRONG.getDescription());
    } catch (IncorrectCredentialsException |NullPointerException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.USER_NOT_EXIST.getDescription());
    } catch (AuthenticationException e) {
        loginMessage.setMessage(BKGConstants.LoginFailureMessage.ACCOUNT_LOCK.getDescription());
    }
    return loginMessage;
}

class LoginMessage {
    private String status;
    private String message;
    private String redirect;

    public LoginMessage(String status) {
        this.status = status;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getRedirect() {
        return redirect;
    }

    public void setRedirect(String redirect) {
        this.redirect = redirect;
    }
}
\`\`\`


##### 角色校验
登陆的时候,其实只是实现了 \`登陆认证\`,\`缓存登录信息\`的过程.
并没有实现,\`权限赋予\`的过程.只有第一次遇到 需要登陆且特定权限的url的时候,才会请求后台是否有进入对应url的权限.

在讲权限之前,概括一下数据库的设计
\`\`\`SQL
CREATE TABLE USERS
(
    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    ACTIVE BIT NOT NULL,
    ADDRESS VARCHAR(300),
    CITY VARCHAR(50),
    COMPANY VARCHAR(20),
    COUNTRY VARCHAR(50),
    CRYPTED_PASSWORD VARCHAR(255),
    DEPARTMENT VARCHAR(20),
    DISPLAY_NAME VARCHAR(128),
    EMAIL VARCHAR(60) NOT NULL,
    FAX VARCHAR(100),
    FIRST_NAME VARCHAR(40),
    GENDER VARCHAR(6),
    JOBTITLE VARCHAR(100),
    LAST_NAME VARCHAR(40),
    LOCATION VARCHAR(50),
    MIDDLE_NAME VARCHAR(40),
    OFFICE VARCHAR(20),
    OFFICECODE VARCHAR(22),
    PHONE VARCHAR(128),
    SALT VARCHAR(255) NOT NULL,
    STAFFID VARCHAR(20),
    STAFFROLE VARCHAR(15),
    TERRITORY VARCHAR(100),
    USERID VARCHAR(20) NOT NULL
);


CREATE TABLE ROLES
(
    ID BIGINT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    DESCRIPTION VARCHAR(255),
    NAME VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX UK_OFX66KERUAPI6VYQPV6F2OR37 ON ROLES (NAME);

CREATE TABLE ROLE_USER
(
    ROLE_ID BIGINT NOT NULL,
    USER_ID BIGINT NOT NULL,
    PRIMARY KEY (ROLE_ID, USER_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (ID)
);

CREATE INDEX FK_NJAJEL6A2Q8TR36EMB9L8VW7N ON ROLE_USER (USER_ID);

\`\`\`
数据库有三个表 \`USERS\`,\`ROLES\`,\`USER_ROLE\`
其实在设计上\`User\`表跟\`ROLE\`表是多对多的关系,即User里面有一个Set<Role>,Role里面也有一个Set<User>
通过中间表\`USER_ROLE\`来实现多对多关联.

下面来看 身份认证的具体实现
\`BookingShiroRealm.java\`
\`\`\`Java
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
    LoginSession loginSession = (LoginSession) principals.fromRealm(getName()).iterator().next();
    if(SecurityUtils.getSubject().getSession().getAttribute(LOGIN_SESSION_NAME)==null){
        SecurityUtils.getSubject().getSession().setAttribute(LOGIN_SESSION_NAME, loginSession);
    }
    if(SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO)==null){

        UserDto userDto=userService.findUserById(loginSession.getUserId());
        if (userDto != null) {
            SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
            Set<RoleDto> roleDtoSet=userService.getUserRolesByUserId(userDto.getId());
            for(RoleDto roleDto:roleDtoSet){
                info.addRole(roleDto.getName().toLowerCase());
            }

            SecurityUtils.getSubject().getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO, info);
        } else {
            return null;
        }
    }
    return (AuthorizationInfo)SecurityUtils.getSubject().getSession().getAttribute(SIMPLE_AUTHORIZATION_INFO);
}
\`\`\`
通过
\`\`\`Java
Subject.getSession().setAttribute(SIMPLE_AUTHORIZATION_INFO,info)
\`\`\`
来实现一个 根据通过已经登陆的用户,获取其在数据库中所具有的角色的名字的集合 生成字符串,然后存在Session里面.
当需要对应的权限,且发现已经有\`SIMPLE_AUTHORIZATION_INFO\`这个属性,则根据属性中是否含有对应字符串的来判定是否有对应权限.

当然 对应权限的获取,也是通过shiro 配置里面的captchaFilter的具体实现类,实现其\`isAccessAllowed\`方法来判定.











## Summary
本次主要分享了Share 如何在Spring中整合Apache Shiro的过程.
但是整体配置依然是通过XML统一配置,其实Shiro在近期的版本已经有了Annotation级别的方法能够方便的对URL的Mapping进行注解.
具体的应用过程,就像Spring 2.X 升级到 3.X 的过程一样,但是由于没有实战,不便多说.
",
            "metadata": Object {
              "category": "Blog",
              "cover": "https://picsum.photos/id/126/800/300",
              "created": "2015-10-25",
              "tags": Array [
                "Spring",
                "Security",
                "Shiro",
                "Java",
              ],
              "title": "Spring 整合 Apache Shiro 实现各等级的权限管理",
              "updated": "2015-10-25",
            },
            "permalink": "/2015/10/25/apache-shiro-spring-integration",
            "summary": "前几个月在做一个常规的权限隔离功能的时候,恰好使用过Apache Shiro.
Apache Shiro 是一款Java的安全框架,通常用作Web应用的权限校验,身份验证.Apache Shiro i",
            "toc": Array [
              Object {
                "children": Array [
                  Object {
                    "children": Array [],
                    "id": "background",
                    "label": "Background",
                    "level": 2,
                    "pid": 0,
                    "position": 1,
                  },
                  Object {
                    "children": Array [
                      Object {
                        "children": Array [
                          Object {
                            "children": Array [],
                            "id": "业务场景假设",
                            "label": "业务场景假设",
                            "level": 4,
                            "pid": 3,
                            "position": 4,
                          },
                          Object {
                            "children": Array [
                              Object {
                                "children": Array [],
                                "id": "maven",
                                "label": "Maven",
                                "level": 5,
                                "pid": 5,
                                "position": 6,
                              },
                              Object {
                                "children": Array [],
                                "id": "webxml",
                                "label": "web.xml",
                                "level": 5,
                                "pid": 5,
                                "position": 7,
                              },
                              Object {
                                "children": Array [],
                                "id": "spring-applicationcontextxml",
                                "label": "Spring ApplicationContext.xml",
                                "level": 5,
                                "pid": 5,
                                "position": 8,
                              },
                              Object {
                                "children": Array [],
                                "id": "spring-applicationcontext-shiro-captchaxml",
                                "label": "Spring applicationContext-shiro-captcha.xml",
                                "level": 5,
                                "pid": 5,
                                "position": 9,
                              },
                            ],
                            "id": "shiro基本配置",
                            "label": "Shiro基本配置",
                            "level": 4,
                            "pid": 3,
                            "position": 5,
                          },
                          Object {
                            "children": Array [
                              Object {
                                "children": Array [
                                  Object {
                                    "children": Array [],
                                    "id": "登录",
                                    "label": "登录",
                                    "level": 6,
                                    "pid": 11,
                                    "position": 12,
                                  },
                                  Object {
                                    "children": Array [],
                                    "id": "注销",
                                    "label": "注销",
                                    "level": 6,
                                    "pid": 11,
                                    "position": 13,
                                  },
                                ],
                                "id": "登录与注销",
                                "label": "登录与注销",
                                "level": 5,
                                "pid": 10,
                                "position": 11,
                              },
                              Object {
                                "children": Array [],
                                "id": "同步登录与异步登陆",
                                "label": "同步登录与异步登陆",
                                "level": 5,
                                "pid": 10,
                                "position": 14,
                              },
                              Object {
                                "children": Array [],
                                "id": "角色校验",
                                "label": "角色校验",
                                "level": 5,
                                "pid": 10,
                                "position": 15,
                              },
                            ],
                            "id": "配置详解",
                            "label": "配置详解",
                            "level": 4,
                            "pid": 3,
                            "position": 10,
                          },
                        ],
                        "id": "url级别的权限控制",
                        "label": "URL级别的权限控制",
                        "level": 3,
                        "pid": 2,
                        "position": 3,
                      },
                    ],
                    "id": "权限控制",
                    "label": "权限控制",
                    "level": 2,
                    "pid": 0,
                    "position": 2,
                  },
                  Object {
                    "children": Array [],
                    "id": "summary",
                    "label": "Summary",
                    "level": 2,
                    "pid": 0,
                    "position": 16,
                  },
                ],
                "id": "spring-整合-apache-shiro-实现各等级的权限管理",
                "label": "Spring 整合 Apache Shiro 实现各等级的权限管理",
                "level": 1,
                "pid": -1,
                "position": 0,
              },
            ],
          },
          "$posts": Array [],
          "loaded": false,
        }
      }
    >
      <div
        className="makeStyles-root-1"
      >
        <div
          className="makeStyles-content-3"
        >
          <PostContent
            html=""
          >
            <div
              className="makeStyles-root-4"
            >
              <div
                className="makeStyles-content-5 markdown-body"
                dangerouslySetInnerHTML={
                  Object {
                    "__html": "",
                  }
                }
              />
            </div>
          </PostContent>
          <PostComment
            identifier="-posts-2015-10-25-some-post"
            shortname="aquariuslt"
            title=""
            url="http://localhost/"
          >
            <div
              className="makeStyles-content-6"
            >
              <DiscussionEmbed
                config={
                  Object {
                    "identifier": "-posts-2015-10-25-some-post",
                    "title": "",
                    "url": "http://localhost/",
                  }
                }
                shortname="aquariuslt"
              >
                <div
                  id="disqus_thread"
                />
              </DiscussionEmbed>
            </div>
          </PostComment>
        </div>
        <div
          className="makeStyles-nav-2"
        >
          <PostTOC>
            <nav
              className="makeStyles-root-7"
            />
          </PostTOC>
        </div>
      </div>
    </Memo(wrappedComponent)>
  </o>
</inject-with-postStore(Object)>
`;
